{"version":3,"sources":["utils/common-functions.js","components/row.js","components/table.js","components/level.js","constants.js","components/choropleth.js","components/mapexplorer.js","components/timeseries.js","components/minigraph.js","components/home.js","components/navbar.js","components/links.js","components/banner.js","components/patients.js","components/downloadblock.js","components/patientdb.js","App.js","serviceWorker.js","index.js"],"names":["months","formatDate","unformattedDate","day","slice","month","year","time","formatDateAbsolute","validateCTS","data","today","Date","setHours","dataTypes","filter","d","every","dt","date","Number","getFullYear","Row","props","useState","state","setState","districts","setDistricts","sortedDistricts","setSortedDistricts","sortColumn","localStorage","getItem","isAscending","sortData","setSortData","useEffect","handleReveal","sortDistricts","useCallback","aDistricts","sorted","Object","keys","sort","district1","district2","value1","parseInt","confirmed","value2","comparisonValue","forEach","key","handleSort","column","setItem","Fragment","className","reveal","style","display","total","onClick","onMouseEnter","onHighlightState","index","onMouseLeave","touchstart","background","fontWeight","color","deltaconfirmed","active","recovered","deltarecovered","deaths","deltadeaths","colSpan","title","isNaN","parse","lastupdatedtime","formatDistance","e","window","innerWidth","district","toLowerCase","map","onHighlightDistrict","delta","Unknown","Table","states","setStates","revealedStates","setRevealedStates","count","setCount","summary","reduce","a","length","s","stateDistrictWiseData","currentsortColumn","currentTarget","querySelector","getAttribute","totalRow","splice","StateData1","StateData2","unshift","doSort","animationDelay","to","districtData","Level","setData","setConfirmed","setActive","recoveries","setRecoveries","setDeaths","deltas","setDeltas","parseData","MAP_TYPES","propertyFieldMap","country","ChoroplethMap","statistic","mapData","setHoveredRegion","mapMeta","changeMap","selectedRegion","choroplethMap","useRef","svgRenderCount","setSvgRenderCount","ready","geoData","d3","remove","propertyField","mapType","svg","current","width","attr","height","topology","topojson","objects","graphObjectName","projection","fitSize","fitExtent","path","onceTouchedRegion","append","selectAll","features","enter","n","properties","maxConfirmed","on","name","err","console","log","handleMouseover","target","parentNode","appendChild","text","value","parseFloat","toFixed","toTitleCase","str","split","i","charAt","toUpperCase","join","renderData","cells","label","domain","genLength","generatedLabels","labelDelimiter","Math","floor","n1","n2","Array","from","legendLinear","legendColor","shapeWidth","shapeHeight","titleWidth","labels","orient","scale","select","call","geoDataFile","prevCount","classed","nodes","id","viewBox","preserveAspectRatio","ref","India","Assam","Bihar","Chhattisgarh","Delhi","Karnataka","Kerala","Goa","Gujarat","Haryana","Jharkhand","Ladakh","Maharashtra","Manipur","Meghalaya","Mizoram","Nagaland","Odisha","Punjab","Rajasthan","Sikkim","Telangana","Tripura","Uttarakhand","regionHighlighted","setSelectedRegion","currentHoveredRegion","setCurrentHoveredRegion","currentMap","setCurrentMap","region","getRegionFromState","useMemo","currentMapData","acc","districtWiseData","getRegionFromDistrict","undefined","newMap","switchMapToState","topDistrict","b","marginTop","padding","borderRadius","marginRight","TimeSeries","timeseries","setTimeseries","datapoint","setDatapoint","setIndex","mode","setMode","logMode","setLogMode","update","setUpdate","graphElement1","graphElement2","graphElement3","graphElement4","graphElement5","graphElement6","u","graphData","svg1","svg2","svg3","svg4","svg5","svg6","margin","dateMin","setDate","getDate","dateMax","x","range","indexScale","svgArray","colors","logCharts","Set","dTypeMaxMap","c","yScales","entries","type","maxY","applyLogMode","has","nice","match","y","dataTypeIdx","dType","max","focus","mouseout","mousemove","xm","this","round","invert","f","j","ticks","scaleIdx","ceil","log10","tickCount","tickPadding","tickFormat","dots","datum","curve","refreshGraphs","graphs","yesterdayDate","lastDate","isYesterday","getMonth","Minigraph","y1","path1","totalLength1","node","getTotalLength","transition","duration","animate","path2","totalLength2","path3","totalLength3","path4","totalLength4","Home","setStateDistrictWiseData","fetched","setFetched","graphOption","setGraphOption","lastUpdated","setLastUpdated","activityLog","setActivityLog","timeseriesMode","setTimeseriesMode","timeseriesLogMode","setTimeseriesLogMode","setRegionHighlighted","getStates","Promise","all","axios","get","response","stateDistrictWiseResponse","updateLogResponse","statewise","cases_time_series","htmlFor","checked","aria-label","onChange","event","disabled","format","reverse","activity","timestamp","Navbar","location","pathname","alt","src","pages","page","pageLink","animationDelayForNavbar","displayName","Links","href","Banner","snippets","setSnippets","snippet","setSnippet","then","factoids","random","catch","snippetChooser","min","interval","setInterval","clearInterval","banner","Patients","patients","setPatients","patient","setPatient","logs","setLogs","modal","setModal","document","body","overflow","parseByDate","dateannounced","list","push","colorMode","indexTwo","gender","patientnumber","typeoftransmission","nationality","patientIndexArg","patientIndex","switchPatient","contractedfromwhichpatientsuspected","detectedcity","detecteddistrict","detectedstate","agebracket","statepatientnumber","notes","source1","source2","source3","CSVDownloadLink","csv","Parser","encodeURIComponent","download","DownloadBlock","dataJSON","JSON","stringify","filterByObject","obj","filters","p","PatientDB","filteredPatients","setFilteredPatients","error","setError","useLocation","subDays","setFilters","setColorMode","scrollTo","raw_data","fetchRawData","handleFilters","newFilters","getElementById","city","selectedIndex","getSortedValues","setValues","size","add","selected","history","require","createBrowserHistory","App","view","render","exact","component","Boolean","hostname","ReactDOM","navigator","serviceWorker","registration","unregister","message"],"mappings":"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","file":"static/js/main.0f042761.chunk.js","sourcesContent":["const months = {\n  '01': 'Jan',\n  '02': 'Feb',\n  '03': 'Mar',\n  '04': 'Apr',\n  '05': 'May',\n  '06': 'Jun',\n  '07': 'Jul',\n  '08': 'Aug',\n  '09': 'Sep',\n  '10': 'Oct',\n  '11': 'Nov',\n  '12': 'Dec',\n};\n\nexport const formatDate = (unformattedDate) => {\n  const day = unformattedDate.slice(0, 2);\n  const month = unformattedDate.slice(3, 5);\n  const year = unformattedDate.slice(6, 10);\n  const time = unformattedDate.slice(11);\n  return `${year}-${month}-${day}T${time}+05:30`;\n};\n\nexport const formatDateAbsolute = (unformattedDate) => {\n  const day = unformattedDate.slice(0, 2);\n  const month = unformattedDate.slice(3, 5);\n  const time = unformattedDate.slice(11);\n  return `${day} ${months[month]}, ${time.slice(0, 5)} IST`;\n};\n\nexport const validateCTS = (data = []) => {\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n  const dataTypes = [\n    'dailyconfirmed',\n    'dailydeceased',\n    'dailyrecovered',\n    'totalconfirmed',\n    'totaldeceased',\n    'totalrecovered',\n  ];\n  return data\n    .filter((d) => dataTypes.every((dt) => d[dt]) && d.date)\n    .filter((d) => dataTypes.every((dt) => Number(d[dt]) >= 0))\n    .filter((d) => {\n      const year = today.getFullYear();\n      return new Date(d.date + year) < today;\n    });\n};\n","import React, {useState, useEffect, useCallback} from 'react';\nimport * as Icon from 'react-feather';\nimport {formatDate, formatDateAbsolute} from '../utils/common-functions';\nimport {formatDistance} from 'date-fns';\nfunction Row(props) {\n  const [state, setState] = useState(props.state);\n  const [districts, setDistricts] = useState(props.districts);\n  const [sortedDistricts, setSortedDistricts] = useState(props.districts);\n  const [sortData, setSortData] = useState({\n    sortColumn: localStorage.getItem('district.sortColumn')\n      ? localStorage.getItem('district.sortColumn')\n      : 'confirmed',\n    isAscending: localStorage.getItem('district.isAscending')\n      ? localStorage.getItem('district.isAscending') === 'true'\n      : false,\n  });\n\n  useEffect(() => {\n    setState(props.state);\n  }, [props.state]);\n\n  useEffect(() => {\n    setDistricts(props.districts);\n    setSortedDistricts(props.districts);\n  }, [props.districts]);\n\n  const handleReveal = () => {\n    props.handleReveal(props.state.state);\n  };\n\n  const sortDistricts = useCallback(\n    (aDistricts) => {\n      const sorted = {};\n      if (aDistricts) {\n        Object.keys(aDistricts)\n          .sort((district1, district2) => {\n            const sortColumn = sortData.sortColumn;\n            const value1 =\n              sortColumn === 'district'\n                ? district1\n                : parseInt(aDistricts[district1].confirmed);\n            const value2 =\n              sortColumn === 'district'\n                ? district2\n                : parseInt(aDistricts[district2].confirmed);\n            const comparisonValue =\n              value1 > value2\n                ? 1\n                : value1 === value2 && district1 > district2\n                ? 1\n                : -1;\n            return sortData.isAscending\n              ? comparisonValue\n              : comparisonValue * -1;\n          })\n          .forEach((key) => {\n            sorted[key] = aDistricts[key];\n          });\n        setSortedDistricts(sorted);\n      }\n    },\n    [sortData.isAscending, sortData.sortColumn]\n  );\n\n  const handleSort = (column) => {\n    const isAscending =\n      sortData.sortColumn === column\n        ? !sortData.isAscending\n        : sortData.sortColumn === 'district';\n    setSortData({\n      sortColumn: column,\n      isAscending: isAscending,\n    });\n    localStorage.setItem('district.sortColumn', column);\n    localStorage.setItem('district.isAscending', isAscending);\n  };\n\n  useEffect(() => {\n    sortDistricts(districts);\n  }, [districts, sortData, sortDistricts]);\n\n  return (\n    <React.Fragment>\n      <span\n        className={`dropdown ${\n          props.reveal ? 'rotateRightDown' : 'rotateDownRight'\n        }`}\n        style={{display: !props.total ? '' : 'none'}}\n        onClick={() => {\n          handleReveal();\n        }}\n      >\n        <Icon.ChevronDown />\n      </span>\n      <tr\n        className={props.total ? 'state is-total' : 'state'}\n        onMouseEnter={() => props.onHighlightState?.(state, props.index)}\n        onMouseLeave={() => props.onHighlightState?.()}\n        touchstart={() => props.onHighlightState?.(state, props.index)}\n        onClick={!props.total ? handleReveal : null}\n        style={{background: props.index % 2 === 0 ? '#f8f9fa' : ''}}\n      >\n        <td style={{fontWeight: 600}}>{state.state}</td>\n        <td>\n          <span className=\"deltas\" style={{color: '#ff073a'}}>\n            {state.deltaconfirmed > 0 && <Icon.ArrowUp />}\n            {state.deltaconfirmed > 0 ? `${state.deltaconfirmed}` : ''}\n          </span>\n          {parseInt(state.confirmed) === 0 ? '-' : state.confirmed}\n        </td>\n        <td\n          style={{color: parseInt(state.active) === 0 ? '#B5B5B5' : 'inherit'}}\n        >\n          {/* <span className=\"deltas\" style={{color: '#007bff'}}>\n            {!state.delta.active==0 && <Icon.ArrowUp/>}\n            {state.delta.active>0 ? `${state.delta.active}` : ''}\n          </span>*/}\n          {parseInt(state.active) === 0 ? '-' : state.active}\n        </td>\n        <td\n          style={{\n            color: parseInt(state.recovered) === 0 ? '#B5B5B5' : 'inherit',\n          }}\n        >\n          <span className=\"deltas\" style={{color: '#28a745'}}>\n            {state.deltarecovered > 0 && <Icon.ArrowUp />}\n            {state.deltarecovered > 0 ? `${state.deltarecovered}` : ''}\n          </span>\n          {parseInt(state.recovered) === 0 ? '-' : state.recovered}\n        </td>\n        <td\n          style={{color: parseInt(state.deaths) === 0 ? '#B5B5B5' : 'inherit'}}\n        >\n          <span className=\"deltas\" style={{color: '#6c757d'}}>\n            {state.deltadeaths > 0 && <Icon.ArrowUp />}\n            {state.deltadeaths > 0 ? `${state.deltadeaths}` : ''}\n          </span>\n          {parseInt(state.deaths) === 0 ? '-' : state.deaths}\n        </td>\n      </tr>\n\n      <tr\n        className={'state-last-update'}\n        style={{display: props.reveal && !props.total ? '' : 'none'}}\n      >\n        <td colSpan={2}>\n          <div className=\"last-update\">\n            <h6>Last Updated&nbsp;</h6>\n            <h6\n              title={\n                isNaN(Date.parse(formatDate(props.state.lastupdatedtime)))\n                  ? ''\n                  : formatDateAbsolute(props.state.lastupdatedtime)\n              }\n            >\n              {isNaN(Date.parse(formatDate(props.state.lastupdatedtime)))\n                ? ''\n                : `${formatDistance(\n                    new Date(formatDate(props.state.lastupdatedtime)),\n                    new Date()\n                  )} Ago`}\n            </h6>\n          </div>\n        </td>\n      </tr>\n\n      <tr\n        className={`district-heading`}\n        style={{display: props.reveal && !props.total ? '' : 'none'}}\n      >\n        <td onClick={(e) => handleSort('district')}>\n          <div className=\"heading-content\">\n            <abbr title=\"District\">District</abbr>\n            <div\n              style={{\n                display:\n                  sortData.sortColumn === 'district' ? 'initial' : 'none',\n              }}\n            >\n              {sortData.isAscending ? (\n                <div className=\"arrow-up\" />\n              ) : (\n                <div className=\"arrow-down\" />\n              )}\n            </div>\n          </div>\n        </td>\n        <td onClick={(e) => handleSort('confirmed')}>\n          <div className=\"heading-content\">\n            <abbr\n              className={`${window.innerWidth <= 769 ? 'is-cherry' : ''}`}\n              title=\"Confirmed\"\n            >\n              {window.innerWidth <= 769\n                ? window.innerWidth <= 375\n                  ? 'C'\n                  : 'Cnfmd'\n                : 'Confirmed'}\n            </abbr>\n            <div\n              style={{\n                display:\n                  sortData.sortColumn === 'confirmed' ? 'initial' : 'none',\n              }}\n            >\n              {sortData.isAscending ? (\n                <div className=\"arrow-up\" />\n              ) : (\n                <div className=\"arrow-down\" />\n              )}\n            </div>\n          </div>\n        </td>\n      </tr>\n\n      {sortedDistricts &&\n        Object.keys(sortedDistricts)\n          .filter((district) => district.toLowerCase() !== 'unknown')\n          .map((district, index) => {\n            if (district.toLowerCase() !== 'unknown') {\n              return (\n                <tr\n                  key={index}\n                  className={`district`}\n                  style={{\n                    display: props.reveal && !props.total ? '' : 'none',\n                    background: index % 2 === 0 ? '#f8f9fa' : '',\n                  }}\n                  onMouseEnter={() =>\n                    props.onHighlightDistrict?.(district, state, props.index)\n                  }\n                  onMouseLeave={() => props.onHighlightDistrict?.()}\n                  touchstart={() =>\n                    props.onHighlightDistrict?.(district, state, props.index)\n                  }\n                >\n                  <td style={{fontWeight: 600}}>{district}</td>\n                  <td>\n                    <span className=\"deltas\" style={{color: '#ff073a'}}>\n                      {sortedDistricts[district].delta.confirmed > 0 && (\n                        <Icon.ArrowUp />\n                      )}\n                      {sortedDistricts[district].delta.confirmed > 0\n                        ? `${sortedDistricts[district].delta.confirmed}`\n                        : ''}\n                    </span>\n                    {sortedDistricts[district].confirmed}\n                  </td>\n                </tr>\n              );\n            }\n            return null;\n          })}\n\n      {sortedDistricts?.Unknown && (\n        <tr\n          className={`district`}\n          style={{display: props.reveal && !props.total ? '' : 'none'}}\n        >\n          <td style={{fontWeight: 600}}>Unknown</td>\n          <td>\n            <span className=\"deltas\" style={{color: '#ff073a'}}>\n              {sortedDistricts['Unknown'].delta.confirmed > 0 && (\n                <Icon.ArrowUp />\n              )}\n              {sortedDistricts['Unknown'].delta.confirmed > 0\n                ? `${sortedDistricts['Unknown'].delta.confirmed}`\n                : ''}\n            </span>\n            {sortedDistricts['Unknown'].confirmed}\n          </td>\n        </tr>\n      )}\n\n      <tr\n        className={`spacer`}\n        style={{display: props.reveal && !props.total ? '' : 'none'}}\n      >\n        <td></td>\n        <td></td>\n        <td></td>\n      </tr>\n    </React.Fragment>\n  );\n}\n\nexport default Row;\n","import React, {useState, useEffect} from 'react';\nimport {Link} from 'react-router-dom';\n\nimport Row from './row';\n\nfunction Table(props) {\n  const [states, setStates] = useState(props.states);\n  const [revealedStates, setRevealedStates] = useState({});\n  const [districts, setDistricts] = useState({});\n  const [count, setCount] = useState(0);\n  const [sortData, setSortData] = useState({\n    sortColumn: localStorage.getItem('state.sortColumn')\n      ? localStorage.getItem('state.sortColumn')\n      : 'confirmed',\n    isAscending: localStorage.getItem('state.isAscending')\n      ? localStorage.getItem('state.isAscending') === 'true'\n      : false,\n  });\n\n  useEffect(() => {\n    if (props.summary === true) {\n      setStates(props.states.slice(0, 9));\n    } else {\n      setStates(props.states);\n    }\n  }, [props.states, props.summary]);\n\n  useEffect(() => {\n    if (props.states[0]) {\n      setRevealedStates(\n        props.states.reduce((a, state) => {\n          return {...a, [state.state]: false};\n        }, {})\n      );\n    }\n  }, [props.states]);\n\n  useEffect(() => {\n    if (states.length > 0) {\n      // slice to ignore the first item which is the total count\n      setCount(states.slice(1).filter((s) => s && s.confirmed > 0).length);\n    }\n  }, [states]);\n\n  useEffect(() => {\n    setDistricts(props.stateDistrictWiseData);\n  }, [props.stateDistrictWiseData]);\n\n  const doSort = (e, props) => {\n    const totalRow = states.splice(0, 1);\n    states.sort((StateData1, StateData2) => {\n      const sortColumn = sortData.sortColumn;\n      let value1 = StateData1[sortColumn];\n      let value2 = StateData2[sortColumn];\n\n      if (sortColumn !== 'state') {\n        value1 = parseInt(StateData1[sortColumn]);\n        value2 = parseInt(StateData2[sortColumn]);\n      }\n\n      if (sortData.isAscending) {\n        return value1 > value2\n          ? 1\n          : value1 === value2 && StateData1['state'] > StateData2['state']\n          ? 1\n          : -1;\n      } else {\n        return value1 < value2\n          ? 1\n          : value1 === value2 && StateData1['state'] > StateData2['state']\n          ? 1\n          : -1;\n      }\n    });\n    states.unshift(totalRow[0]);\n  };\n\n  const handleSort = (e, props) => {\n    const currentsortColumn = e.currentTarget\n      .querySelector('abbr')\n      .getAttribute('title')\n      .toLowerCase();\n    const isAscending =\n      sortData.sortColumn === currentsortColumn\n        ? !sortData.isAscending\n        : sortData.sortColumn === 'state';\n    setSortData({\n      sortColumn: currentsortColumn,\n      isAscending: isAscending,\n    });\n    localStorage.setItem('state.sortColumn', currentsortColumn);\n    localStorage.setItem('state.isAscending', isAscending);\n  };\n\n  const handleReveal = (state) => {\n    setRevealedStates({\n      ...revealedStates,\n      [state]: !revealedStates[state],\n    });\n  };\n\n  doSort();\n\n  return (\n    <React.Fragment>\n      <h5 className=\"table-fineprint fadeInUp\" style={{animationDelay: '1s'}}>\n        Compiled from State Govt. numbers <Link to=\"/faq\">Know More</Link>\n      </h5>\n      <table className=\"table fadeInUp\" style={{animationDelay: '1s'}}>\n        <thead>\n          <tr>\n            <th\n              className=\"sticky state-heading\"\n              onClick={(e) => handleSort(e, props)}\n            >\n              <div className=\"heading-content\">\n                <abbr title=\"State\">State/UT</abbr>\n                <div\n                  style={{\n                    display:\n                      sortData.sortColumn === 'state' ? 'initial' : 'none',\n                  }}\n                >\n                  {sortData.isAscending ? (\n                    <div className=\"arrow-up\" />\n                  ) : (\n                    <div className=\"arrow-down\" />\n                  )}\n                </div>\n              </div>\n            </th>\n            <th className=\"sticky\" onClick={(e) => handleSort(e, props)}>\n              <div className=\"heading-content\">\n                <abbr\n                  className={`${window.innerWidth <= 769 ? 'is-cherry' : ''}`}\n                  title=\"Confirmed\"\n                >\n                  {window.innerWidth <= 769\n                    ? window.innerWidth <= 375\n                      ? 'C'\n                      : 'Cnfmd'\n                    : 'Confirmed'}\n                </abbr>\n                <div\n                  style={{\n                    display:\n                      sortData.sortColumn === 'confirmed' ? 'initial' : 'none',\n                  }}\n                >\n                  {sortData.isAscending ? (\n                    <div className=\"arrow-up\" />\n                  ) : (\n                    <div className=\"arrow-down\" />\n                  )}\n                </div>\n              </div>\n            </th>\n            <th className=\"sticky\" onClick={(e) => handleSort(e, props)}>\n              <div className=\"heading-content\">\n                <abbr\n                  className={`${window.innerWidth <= 769 ? 'is-blue' : ''}`}\n                  title=\"Active\"\n                >\n                  {window.innerWidth <= 769\n                    ? window.innerWidth <= 375\n                      ? 'A'\n                      : 'Actv'\n                    : 'Active'}\n                </abbr>\n                <div\n                  style={{\n                    display:\n                      sortData.sortColumn === 'active' ? 'initial' : 'none',\n                  }}\n                >\n                  {sortData.isAscending ? (\n                    <div className=\"arrow-up\" />\n                  ) : (\n                    <div className=\"arrow-down\" />\n                  )}\n                </div>\n              </div>\n            </th>\n            <th className=\"sticky\" onClick={(e) => handleSort(e, props)}>\n              <div className=\"heading-content\">\n                <abbr\n                  className={`${window.innerWidth <= 769 ? 'is-green' : ''}`}\n                  title=\"Recovered\"\n                >\n                  {window.innerWidth <= 769\n                    ? window.innerWidth <= 375\n                      ? 'R'\n                      : 'Rcvrd'\n                    : 'Recovered'}\n                </abbr>\n                <div\n                  className={\n                    sortData.sortColumn === 'recovered' ? 'sort-black' : ''\n                  }\n                ></div>\n                <div\n                  style={{\n                    display:\n                      sortData.sortColumn === 'recovered' ? 'initial' : 'none',\n                  }}\n                >\n                  {sortData.isAscending ? (\n                    <div className=\"arrow-up\" />\n                  ) : (\n                    <div className=\"arrow-down\" />\n                  )}\n                </div>\n              </div>\n            </th>\n            <th className=\"sticky\" onClick={(e) => handleSort(e, props)}>\n              <div className=\"heading-content\">\n                <abbr\n                  className={`${window.innerWidth <= 769 ? 'is-gray' : ''}`}\n                  title=\"Deaths\"\n                >\n                  {window.innerWidth <= 769\n                    ? window.innerWidth <= 375\n                      ? 'D'\n                      : 'Dcsd'\n                    : 'Deceased'}\n                </abbr>\n                <div\n                  style={{\n                    display:\n                      sortData.sortColumn === 'deaths' ? 'initial' : 'none',\n                  }}\n                >\n                  {sortData.isAscending ? (\n                    <div className=\"arrow-up\" />\n                  ) : (\n                    <div className=\"arrow-down\" />\n                  )}\n                </div>\n              </div>\n            </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {states.map((state, index) => {\n            if (index !== 0 && state.confirmed > 0) {\n              return (\n                <Row\n                  key={index}\n                  index={index}\n                  state={state}\n                  total={false}\n                  reveal={revealedStates[state.state]}\n                  districts={\n                    Object.keys(districts).length - 1 > 0\n                      ? districts[state.state].districtData\n                      : []\n                  }\n                  onHighlightState={props.onHighlightState}\n                  onHighlightDistrict={props.onHighlightDistrict}\n                  handleReveal={handleReveal}\n                />\n              );\n            }\n            return null;\n          })}\n        </tbody>\n\n        <tbody>\n          {states.length > 1 && props.summary === false && (\n            <Row key={0} state={states[0]} total={true} />\n          )}\n        </tbody>\n      </table>\n      <h5 className=\"table-fineprint fadeInUp\" style={{animationDelay: '1s'}}>\n        {count} States/UTS Affected\n      </h5>\n    </React.Fragment>\n  );\n}\n\nexport default Table;\n","import React, {useState, useEffect} from 'react';\n\nfunction Level(props) {\n  const [data, setData] = useState(props.data);\n  const [confirmed, setConfirmed] = useState(0);\n  const [active, setActive] = useState(0);\n  const [recoveries, setRecoveries] = useState(0);\n  const [deaths, setDeaths] = useState(0);\n  const [deltas, setDeltas] = useState(0);\n\n  useEffect(() => {\n    setData(props.data);\n  }, [props.data]);\n\n  useEffect(() => {\n    const parseData = () => {\n      let confirmed = 0;\n      let active = 0;\n      let recoveries = 0;\n      let deaths = 0;\n      let deltas = {};\n      data.forEach((state, index) => {\n        if (index !== 0) {\n          confirmed += parseInt(state.confirmed);\n          active += parseInt(state.active);\n          recoveries += parseInt(state.recovered);\n          deaths += parseInt(state.deaths);\n        } else {\n          deltas = {\n            confirmed: parseInt(state.deltaconfirmed),\n            deaths: parseInt(state.deltadeaths),\n            recovered: parseInt(state.deltarecovered),\n          };\n        }\n      });\n      setConfirmed(confirmed);\n      setActive(active);\n      setRecoveries(recoveries);\n      setDeaths(deaths);\n      setDeltas(deltas);\n    };\n    parseData();\n  }, [data]);\n\n  return (\n    <div className=\"Level\">\n      <div\n        className=\"level-item is-cherry fadeInUp\"\n        style={{animationDelay: '1s'}}\n      >\n        <h5>Confirmed</h5>\n        <h4>\n          [\n          {deltas\n            ? deltas.confirmed >= 0\n              ? '+' + deltas.confirmed\n              : '+0'\n            : ''}\n          ]\n        </h4>\n        <h1>{confirmed} </h1>\n      </div>\n\n      <div\n        className=\"level-item is-blue fadeInUp\"\n        style={{animationDelay: '1.1s'}}\n      >\n        <h5 className=\"heading\">Active</h5>\n        <h4>&nbsp;</h4>\n        {/* <h4>[{props.deltas ? props.deltas.confirmeddelta-(props.deltas.recovereddelta+props.deltas.deceaseddelta) >=0 ? '+'+(props.deltas.confirmeddelta-(props.deltas.recovereddelta+props.deltas.deceaseddelta)).toString() : '+0' : ''}]</h4>*/}\n        <h1 className=\"title has-text-info\">{active}</h1>\n      </div>\n\n      <div\n        className=\"level-item is-green fadeInUp\"\n        style={{animationDelay: '1.2s'}}\n      >\n        <h5 className=\"heading\">Recovered</h5>\n        <h4>\n          [\n          {deltas\n            ? deltas.recovered >= 0\n              ? '+' + deltas.recovered\n              : '+0'\n            : ''}\n          ]\n        </h4>\n        <h1 className=\"title has-text-success\">{recoveries} </h1>\n      </div>\n\n      <div\n        className=\"level-item is-gray fadeInUp\"\n        style={{animationDelay: '1.3s'}}\n      >\n        <h5 className=\"heading\">Deceased</h5>\n        <h4>\n          [{deltas ? (deltas.deaths >= 0 ? '+' + deltas.deaths : '+0') : ''}]\n        </h4>\n        <h1 className=\"title has-text-grey\">{deaths}</h1>\n      </div>\n    </div>\n  );\n}\n\nexport default Level;\n","export const MAP_TYPES = {\n  COUNTRY: 'country',\n  STATE: 'state',\n};\n\nexport const MAPS_DIR = '/maps';\n","import React, {useCallback, useEffect, useRef, useState} from 'react';\nimport * as d3 from 'd3';\nimport {legendColor} from 'd3-svg-legend';\nimport * as topojson from 'topojson';\nimport {MAP_TYPES} from '../constants';\n\nconst propertyFieldMap = {\n  country: 'st_nm',\n  state: 'district',\n};\n\nfunction ChoroplethMap({\n  statistic,\n  mapData,\n  setHoveredRegion,\n  mapMeta,\n  changeMap,\n  selectedRegion,\n}) {\n  const choroplethMap = useRef(null);\n  const [svgRenderCount, setSvgRenderCount] = useState(0);\n\n  const ready = useCallback(\n    (geoData) => {\n      d3.selectAll('svg#chart > *').remove();\n      const propertyField = propertyFieldMap[mapMeta.mapType];\n      const maxInterpolation = 0.8;\n      const svg = d3.select(choroplethMap.current);\n      const width = +svg.attr('width');\n      const height = +svg.attr('height');\n\n      const handleMouseover = (name) => {\n        try {\n          setHoveredRegion(name, mapMeta);\n        } catch (err) {\n          console.log('err', err);\n        }\n      };\n\n      const topology = topojson.feature(\n        geoData,\n        geoData.objects[mapMeta.graphObjectName]\n      );\n\n      const projection = d3.geoMercator();\n\n      if (mapMeta.mapType === MAP_TYPES.COUNTRY)\n        projection.fitSize([width, height], topology);\n      else\n        projection.fitExtent(\n          [\n            [90, 20],\n            [width, height],\n          ],\n          topology\n        );\n\n      const path = d3.geoPath(projection);\n\n      let onceTouchedRegion = null;\n\n      svg\n        .append('g')\n        .attr('class', 'states')\n        .selectAll('path')\n        .data(topology.features)\n        .enter()\n        .append('path')\n        .attr('class', 'path-region')\n        .attr('fill', function (d) {\n          const n = parseInt(mapData[d.properties[propertyField]]) || 0;\n          const color =\n            n === 0\n              ? '#ffffff'\n              : d3.interpolateReds(\n                  (maxInterpolation * n) / (statistic.maxConfirmed || 0.001)\n                );\n          return color;\n        })\n        .attr('d', path)\n        .attr('pointer-events', 'all')\n        .on('mouseover', (d) => {\n          handleMouseover(d.properties[propertyField]);\n          const target = d3.event.target;\n          d3.select(target.parentNode.appendChild(target)).attr(\n            'class',\n            'map-hover'\n          );\n        })\n        .on('mouseleave', (d) => {\n          const target = d3.event.target;\n          d3.select(target).attr('class', 'path-region map-default');\n          if (onceTouchedRegion === d) onceTouchedRegion = null;\n        })\n        .on('touchstart', (d) => {\n          if (onceTouchedRegion === d) onceTouchedRegion = null;\n          else onceTouchedRegion = d;\n        })\n        .on('click', (d) => {\n          if (onceTouchedRegion) {\n            return;\n          }\n          if (mapMeta.mapType === MAP_TYPES.STATE) {\n            return;\n          }\n          changeMap(d.properties[propertyField], mapMeta.mapType);\n        })\n        .style('cursor', 'pointer')\n        .append('title')\n        .text(function (d) {\n          const value = mapData[d.properties[propertyField]] || 0;\n          return (\n            parseFloat(100 * (value / (statistic.total || 0.001))).toFixed(2) +\n            '% from ' +\n            toTitleCase(d.properties[propertyField])\n          );\n        });\n\n      svg\n        .append('path')\n        .attr('stroke', '#ff073a20')\n        .attr('fill', 'none')\n        .attr('stroke-width', 2)\n        .attr(\n          'd',\n          path(topojson.mesh(geoData, geoData.objects[mapMeta.graphObjectName]))\n        );\n    },\n    [\n      mapData,\n      mapMeta,\n      statistic.total,\n      statistic.maxConfirmed,\n      changeMap,\n      setHoveredRegion,\n    ]\n  );\n\n  const toTitleCase = (str) => {\n    str = str.toLowerCase().split(' ');\n    for (let i = 0; i < str.length; i++) {\n      str[i] = str[i].charAt(0).toUpperCase() + str[i].slice(1);\n    }\n    return str.join(' ');\n  };\n\n  const renderData = useCallback(() => {\n    const svg = d3.select(choroplethMap.current);\n\n    // Colorbar\n    const maxInterpolation = 0.8;\n    const color = d3\n      .scaleSequential(d3.interpolateReds)\n      .domain([0, statistic.maxConfirmed / maxInterpolation || 10]);\n\n    let cells = null;\n    let label = null;\n\n    label = ({i, genLength, generatedLabels, labelDelimiter}) => {\n      if (i === genLength - 1) {\n        const n = Math.floor(generatedLabels[i]);\n        return `${n}+`;\n      } else {\n        const n1 = 1 + Math.floor(generatedLabels[i]);\n        const n2 = Math.floor(generatedLabels[i + 1]);\n        return `${n1} - ${n2}`;\n      }\n    };\n\n    const numCells = 6;\n    const delta = Math.floor(\n      (statistic.maxConfirmed < numCells ? numCells : statistic.maxConfirmed) /\n        (numCells - 1)\n    );\n\n    cells = Array.from(Array(numCells).keys()).map((i) => i * delta);\n\n    svg\n      .append('g')\n      .attr('class', 'legendLinear')\n      .attr('transform', 'translate(1, 335)');\n\n    const legendLinear = legendColor()\n      .shapeWidth(36)\n      .shapeHeight(10)\n      .cells(cells)\n      .titleWidth(3)\n      .labels(label)\n      .title('Confirmed Cases')\n      .orient('vertical')\n      .scale(color);\n\n    svg\n      .select('.legendLinear')\n      .call(legendLinear)\n      .selectAll('text')\n      .style('font-size', '10px');\n  }, [statistic.maxConfirmed]);\n\n  useEffect(() => {\n    (async () => {\n      const data = await d3.json(mapMeta.geoDataFile);\n      if (statistic && choroplethMap.current) {\n        ready(data);\n        renderData();\n        setSvgRenderCount((prevCount) => prevCount + 1);\n      }\n    })();\n  }, [mapMeta.geoDataFile, statistic, renderData, ready]);\n\n  const highlightRegionInMap = (name) => {\n    const paths = d3.selectAll('.path-region');\n    paths.classed('map-hover', (d, i, nodes) => {\n      const propertyField =\n        'district' in d.properties\n          ? propertyFieldMap['state']\n          : propertyFieldMap['country'];\n      if (name === d.properties[propertyField]) {\n        nodes[i].parentNode.appendChild(nodes[i]);\n        return true;\n      }\n      return false;\n    });\n  };\n\n  useEffect(() => {\n    highlightRegionInMap(selectedRegion);\n  }, [svgRenderCount, selectedRegion]);\n\n  return (\n    <div className=\"svg-parent\">\n      <svg\n        id=\"chart\"\n        width=\"480\"\n        height=\"450\"\n        viewBox=\"0 0 480 450\"\n        preserveAspectRatio=\"xMidYMid meet\"\n        ref={choroplethMap}\n      ></svg>\n    </div>\n  );\n}\n\nexport default ChoroplethMap;\n","import React, {useState, useEffect, useMemo, useCallback} from 'react';\nimport ChoroplethMap from './choropleth';\nimport {MAP_TYPES, MAPS_DIR} from '../constants';\nimport {formatDate} from '../utils/common-functions';\nimport {formatDistance} from 'date-fns';\n\nconst mapMeta = {\n  India: {\n    name: 'India',\n    geoDataFile: `${MAPS_DIR}/india.json`,\n    mapType: MAP_TYPES.COUNTRY,\n    graphObjectName: 'india',\n  },\n  'Andaman and Nicobar Islands': {\n    name: 'Andaman and Nicobar Islands',\n    geoDataFile: `${MAPS_DIR}/andamannicobarislands.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'andamannicobarislands_district',\n  },\n  'Arunachal Pradesh': {\n    name: 'Arunachal Pradesh',\n    geoDataFile: `${MAPS_DIR}/arunachalpradesh.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'arunachalpradesh_district',\n  },\n  'Andhra Pradesh': {\n    name: 'Andhra Pradesh',\n    geoDataFile: `${MAPS_DIR}/andhrapradesh.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'andhrapradesh_district',\n  },\n\n  Assam: {\n    name: 'Assam',\n    geoDataFile: `${MAPS_DIR}/assam.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'assam_district',\n  },\n  Bihar: {\n    name: 'Bihar',\n    geoDataFile: `${MAPS_DIR}/bihar.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'bihar_district',\n  },\n  Chhattisgarh: {\n    name: 'Chhattisgarh',\n    geoDataFile: `${MAPS_DIR}/chhattisgarh.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'chhattisgarh_district',\n  },\n  Delhi: {\n    name: 'Delhi',\n    geoDataFile: `${MAPS_DIR}/delhi.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'delhi_district',\n  },\n  Karnataka: {\n    name: 'Karnataka',\n    geoDataFile: `${MAPS_DIR}/karnataka.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'karnataka_district',\n  },\n  Kerala: {\n    name: 'Kerala',\n    geoDataFile: `${MAPS_DIR}/kerala.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'kerala_district',\n  },\n  Goa: {\n    name: 'Goa',\n    geoDataFile: `${MAPS_DIR}/goa.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'goa_district',\n  },\n  Gujarat: {\n    name: 'Gujarat',\n    geoDataFile: `${MAPS_DIR}/gujarat.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'gujarat_district',\n  },\n  Haryana: {\n    name: 'Haryana',\n    geoDataFile: `${MAPS_DIR}/haryana.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'haryana_district',\n  },\n  'Himachal Pradesh': {\n    name: 'Himachal Pradesh',\n    geoDataFile: `${MAPS_DIR}/himachalpradesh.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'himachalpradesh_district',\n  },\n  'Jammu and Kashmir': {\n    name: 'Jammu and Kashmir',\n    geoDataFile: `${MAPS_DIR}/jammukashmir.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'jammukashmir_district',\n  },\n  Jharkhand: {\n    name: 'Jharkhand',\n    geoDataFile: `${MAPS_DIR}/jharkhand.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'jharkhand_district',\n  },\n  Ladakh: {\n    name: 'Ladakh',\n    geoDataFile: `${MAPS_DIR}/ladakh.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'ladakh_district',\n  },\n  'Madhya Pradesh': {\n    name: 'Madhya Pradesh',\n    geoDataFile: `${MAPS_DIR}/madhyapradesh.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'madhyapradesh_district',\n  },\n  Maharashtra: {\n    name: 'Maharashtra',\n    geoDataFile: `${MAPS_DIR}/maharashtra.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'maharashtra_district',\n  },\n  Manipur: {\n    name: 'Manipur',\n    geoDataFile: `${MAPS_DIR}/manipur.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'manipur_district',\n  },\n  Meghalaya: {\n    name: 'Meghalaya',\n    geoDataFile: `${MAPS_DIR}/meghalaya.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'meghalaya_district',\n  },\n  Mizoram: {\n    name: 'Mizoram',\n    geoDataFile: `${MAPS_DIR}/mizoram.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'mizoram_district',\n  },\n  Nagaland: {\n    name: 'Nagaland',\n    geoDataFile: `${MAPS_DIR}/nagaland.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'nagaland_district',\n  },\n  Odisha: {\n    name: 'Odisha',\n    geoDataFile: `${MAPS_DIR}/odisha.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'odisha_district',\n  },\n  Punjab: {\n    name: 'Punjab',\n    geoDataFile: `${MAPS_DIR}/punjab.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'punjab_district',\n  },\n  Rajasthan: {\n    name: 'Rajasthan',\n    geoDataFile: `${MAPS_DIR}/rajasthan.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'rajasthan_district',\n  },\n  Sikkim: {\n    name: 'Sikkim',\n    geoDataFile: `${MAPS_DIR}/sikkim.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'sikkim_district',\n  },\n  'Tamil Nadu': {\n    name: 'Tamil Nadu',\n    geoDataFile: `${MAPS_DIR}/tamil-nadu.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'tamilnadu_district',\n  },\n  Telangana: {\n    name: 'Telangana',\n    geoDataFile: `${MAPS_DIR}/telangana.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'telangana_district',\n  },\n  Tripura: {\n    name: 'Tripura',\n    geoDataFile: `${MAPS_DIR}/tripura.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'tripura_district',\n  },\n  Uttarakhand: {\n    name: 'Uttarakhand',\n    geoDataFile: `${MAPS_DIR}/uttarakhand.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'uttarakhand_district',\n  },\n  'Uttar Pradesh': {\n    name: 'Uttar Pradesh',\n    geoDataFile: `${MAPS_DIR}/uttarpradesh.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'uttarpradesh_district',\n  },\n\n  'West Bengal': {\n    name: 'West Bengal',\n    geoDataFile: `${MAPS_DIR}/westbengal.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'westbengal_district',\n  },\n};\n\nexport default function ({states, stateDistrictWiseData, regionHighlighted}) {\n  const [selectedRegion, setSelectedRegion] = useState({});\n  const [currentHoveredRegion, setCurrentHoveredRegion] = useState({});\n  const [currentMap, setCurrentMap] = useState(mapMeta.India);\n\n  useEffect(() => {\n    const region = getRegionFromState(states[1]);\n    setCurrentHoveredRegion(region);\n  }, [states]);\n\n  if (!currentHoveredRegion) {\n    return null;\n  }\n\n  const [statistic, currentMapData] = useMemo(() => {\n    const statistic = {total: 0, maxConfirmed: 0};\n    let currentMapData = {};\n\n    if (currentMap.mapType === MAP_TYPES.COUNTRY) {\n      currentMapData = states.reduce((acc, state) => {\n        if (state.state === 'Total') {\n          return acc;\n        }\n        const confirmed = parseInt(state.confirmed);\n        statistic.total += confirmed;\n        if (confirmed > statistic.maxConfirmed) {\n          statistic.maxConfirmed = confirmed;\n        }\n\n        acc[state.state] = state.confirmed;\n        return acc;\n      }, {});\n    } else if (currentMap.mapType === MAP_TYPES.STATE) {\n      const districtWiseData = (\n        stateDistrictWiseData[currentMap.name] || {districtData: {}}\n      ).districtData;\n      currentMapData = Object.keys(districtWiseData).reduce((acc, district) => {\n        const confirmed = parseInt(districtWiseData[district].confirmed);\n        statistic.total += confirmed;\n        if (confirmed > statistic.maxConfirmed) {\n          statistic.maxConfirmed = confirmed;\n        }\n        acc[district] = districtWiseData[district].confirmed;\n        return acc;\n      }, {});\n    }\n    return [statistic, currentMapData];\n  }, [currentMap, states, stateDistrictWiseData]);\n\n  const setHoveredRegion = useCallback(\n    (name, currentMap) => {\n      if (currentMap.mapType === MAP_TYPES.COUNTRY) {\n        setCurrentHoveredRegion(\n          getRegionFromState(states.filter((state) => name === state.state)[0])\n        );\n      } else if (currentMap.mapType === MAP_TYPES.STATE) {\n        const state = stateDistrictWiseData[currentMap.name] || {\n          districtData: {},\n        };\n        let districtData = state.districtData[name];\n        if (!districtData) {\n          districtData = {\n            confirmed: 0,\n            active: 0,\n            deaths: 0,\n            recovered: 0,\n          };\n        }\n        setCurrentHoveredRegion(getRegionFromDistrict(districtData, name));\n      }\n    },\n    [stateDistrictWiseData, states]\n  );\n\n  useEffect(() => {\n    if (regionHighlighted === undefined) {\n      return;\n    } else if (regionHighlighted === null) {\n      setSelectedRegion(null);\n      return;\n    }\n    const isState = !('district' in regionHighlighted);\n    if (isState) {\n      const newMap = mapMeta['India'];\n      setCurrentMap(newMap);\n      const region = getRegionFromState(regionHighlighted.state);\n      setCurrentHoveredRegion(region);\n      setSelectedRegion(region.name);\n    } else {\n      const newMap = mapMeta[regionHighlighted.state.state];\n      if (!newMap) {\n        return;\n      }\n      setCurrentMap(newMap);\n      setHoveredRegion(regionHighlighted.district, newMap);\n      setSelectedRegion(regionHighlighted.district);\n    }\n  }, [regionHighlighted, currentMap.mapType, setHoveredRegion]);\n\n  const getRegionFromDistrict = (districtData, name) => {\n    if (!districtData) {\n      return;\n    }\n    const region = {...districtData};\n    if (!region.name) {\n      region.name = name;\n    }\n    return region;\n  };\n\n  const getRegionFromState = (state) => {\n    if (!state) {\n      return;\n    }\n    const region = {...state};\n    if (!region.name) {\n      region.name = region.state;\n    }\n    return region;\n  };\n\n  const switchMapToState = useCallback(\n    (name) => {\n      const newMap = mapMeta[name];\n      if (!newMap) {\n        return;\n      }\n      setCurrentMap(newMap);\n      if (newMap.mapType === MAP_TYPES.COUNTRY) {\n        setHoveredRegion(states[1].state, newMap);\n      } else if (newMap.mapType === MAP_TYPES.STATE) {\n        const districtData = (stateDistrictWiseData[name] || {districtData: {}})\n          .districtData;\n        const topDistrict = Object.keys(districtData)\n          .filter((name) => name !== 'Unknown')\n          .sort((a, b) => {\n            return districtData[b].confirmed - districtData[a].confirmed;\n          })[0];\n        setHoveredRegion(topDistrict, newMap);\n      }\n    },\n    [setHoveredRegion, stateDistrictWiseData, states]\n  );\n  const {name, lastupdatedtime} = currentHoveredRegion;\n\n  return (\n    <div className=\"MapExplorer fadeInUp\" style={{animationDelay: '1.2s'}}>\n      <div className=\"header\">\n        <h1>{currentMap.name} Map</h1>\n        <h6>\n          {window.innerWidth <= 769 ? 'Tap' : 'Hover'} over a{' '}\n          {currentMap.mapType === MAP_TYPES.COUNTRY ? 'state' : 'district'} for\n          more details\n        </h6>\n        {window.innerWidth <= 769 && (\n          <h6 style={{marginTop: '1rem'}}>\n            <span\n              style={{\n                fontWeight: 900,\n                color: '#fff',\n                background: '#000',\n                padding: '0.25rem',\n                borderRadius: '2.5px',\n                marginRight: '0.25rem',\n              }}\n            >\n              Update!\n            </span>{' '}\n            Tap twice on states to view districts!\n          </h6>\n        )}\n      </div>\n\n      <div className=\"map-stats\">\n        <div className=\"stats\">\n          <h5>Confirmed</h5>\n          <div className=\"stats-bottom\">\n            <h1>{currentHoveredRegion.confirmed}</h1>\n            <h6>{}</h6>\n          </div>\n        </div>\n\n        <div className=\"stats is-blue\">\n          <h5>Active</h5>\n          <div className=\"stats-bottom\">\n            <h1>{currentHoveredRegion.active || ''}</h1>\n            <h6>{}</h6>\n          </div>\n        </div>\n\n        <div className=\"stats is-green\">\n          <h5>Recovered</h5>\n          <div className=\"stats-bottom\">\n            <h1>{currentHoveredRegion.recovered || ''}</h1>\n            <h6>{}</h6>\n          </div>\n        </div>\n\n        <div className=\"stats is-gray\">\n          <h5>Deceased</h5>\n          <div className=\"stats-bottom\">\n            <h1>{currentHoveredRegion.deaths || ''}</h1>\n            <h6>{}</h6>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"meta\">\n        <h2>{name}</h2>\n        {lastupdatedtime && (\n          <div\n            className={`last-update ${\n              currentMap.mapType === MAP_TYPES.STATE\n                ? 'district-last-update'\n                : 'state-last-update'\n            }`}\n          >\n            <h6>Last Updated</h6>\n            <h3>\n              {isNaN(Date.parse(formatDate(lastupdatedtime)))\n                ? ''\n                : formatDistance(\n                    new Date(formatDate(lastupdatedtime)),\n                    new Date()\n                  ) + ' Ago'}\n            </h3>\n          </div>\n        )}\n\n        {currentMap.mapType === MAP_TYPES.STATE &&\n        currentMapData.Unknown > 0 ? (\n          <h4 className=\"unknown\">\n            Districts unknown for {currentMapData.Unknown} people\n          </h4>\n        ) : null}\n\n        {currentMap.mapType === MAP_TYPES.STATE ? (\n          <div\n            className=\"button back-button\"\n            onClick={() => switchMapToState('India')}\n          >\n            Back\n          </div>\n        ) : null}\n      </div>\n\n      <ChoroplethMap\n        statistic={statistic}\n        mapMeta={currentMap}\n        mapData={currentMapData}\n        setHoveredRegion={setHoveredRegion}\n        changeMap={switchMapToState}\n        selectedRegion={selectedRegion}\n      />\n    </div>\n  );\n}\n","import React, {useState, useEffect, useRef, useCallback} from 'react';\nimport * as d3 from 'd3';\n\nfunction TimeSeries(props) {\n  const [timeseries, setTimeseries] = useState([]);\n  const [datapoint, setDatapoint] = useState({});\n  const [index, setIndex] = useState(10);\n  const [mode, setMode] = useState(props.mode);\n  const [logMode, setLogMode] = useState(props.logMode);\n  const [update, setUpdate] = useState(-1);\n\n  const graphElement1 = useRef(null);\n  const graphElement2 = useRef(null);\n  const graphElement3 = useRef(null);\n  const graphElement4 = useRef(null);\n  const graphElement5 = useRef(null);\n  const graphElement6 = useRef(null);\n\n  useEffect(() => {\n    if (props.timeseries.length > 1) {\n      setTimeseries(props.timeseries);\n    }\n  }, [props.timeseries]);\n\n  useEffect(() => {\n    setMode(props.mode);\n    setUpdate((u) => u + 1);\n  }, [props.mode]);\n\n  useEffect(() => {\n    setLogMode(props.logMode);\n    setUpdate((u) => u + 1);\n  }, [props.logMode]);\n\n  const graphData = useCallback(\n    (timeseries) => {\n      const data = timeseries;\n      setDatapoint(timeseries[timeseries.length - 1]);\n      setIndex(timeseries.length - 1);\n\n      const svg1 = d3.select(graphElement1.current);\n      const svg2 = d3.select(graphElement2.current);\n      const svg3 = d3.select(graphElement3.current);\n      const svg4 = d3.select(graphElement4.current);\n      const svg5 = d3.select(graphElement5.current);\n      const svg6 = d3.select(graphElement6.current);\n\n      // Margins\n      const margin = {top: 0, right: 20, bottom: 50, left: 20};\n      const width = 650 - margin.left - margin.right;\n      const height = 200 - margin.top - margin.bottom;\n\n      const dateMin = new Date(data[0]['date'] + '2020');\n      dateMin.setDate(dateMin.getDate() - 1);\n      const dateMax = new Date(data[timeseries.length - 1]['date'] + '2020');\n      dateMax.setDate(dateMax.getDate() + 1);\n\n      const x = d3\n        .scaleTime()\n        .domain([dateMin, dateMax])\n        .range([margin.left, width]);\n\n      const indexScale = d3\n        .scaleLinear()\n        .domain([0, timeseries.length])\n        .range([margin.left, width]);\n\n      // Arrays of objects\n      const svgArray = [svg1, svg2, svg3, svg4, svg5, svg6];\n      const dataTypes = [\n        'totalconfirmed',\n        'totalrecovered',\n        'totaldeceased',\n        'dailyconfirmed',\n        'dailyrecovered',\n        'dailydeceased',\n      ];\n      const colors = [\n        '#ff073a',\n        '#28a745',\n        '#6c757d',\n        '#ff073a',\n        '#28a745',\n        '#6c757d',\n      ];\n      const logCharts = new Set([\n        'totalconfirmed',\n        'totalrecovered',\n        'totaldeceased',\n      ]);\n\n      const dTypeMaxMap = dataTypes.reduce((a, c) => {\n        a[c] = d3.max(data, (d) => +d[c]);\n        return a;\n      }, {});\n\n      const yScales = Object.entries(dTypeMaxMap).map(([type, maxY]) => {\n        // apply mode, logMode, etc -- determine scales once and for all\n        const applyLogMode = (maxY) =>\n          logMode && logCharts.has(type)\n            ? d3\n                .scaleLog()\n                .domain([1, 1.1 * maxY])\n                .nice()\n            : d3\n                .scaleLinear()\n                .domain([0, 1.1 * maxY])\n                .nice();\n\n        return (mode\n          ? applyLogMode(\n              type.match('^total')\n                ? dTypeMaxMap['totalconfirmed']\n                : dTypeMaxMap['dailyconfirmed']\n            )\n          : applyLogMode(maxY)\n        ).range([height, margin.top]);\n      });\n\n      const y = (dataTypeIdx, day) => {\n        // Scaling mode filters\n        const scale = yScales[dataTypeIdx];\n        const dType = dataTypes[dataTypeIdx];\n        return scale(\n          logMode && logCharts.has(dType) ? Math.max(1, day[dType]) : day[dType]\n        ); // max(1,y) for logmode\n      };\n\n      /* Focus dots */\n      const focus = svgArray.map((d, i) => {\n        return d\n          .append('g')\n          .append('circle')\n          .attr('fill', colors[i])\n          .attr('stroke', colors[i])\n          .attr('r', 5)\n          .attr('cx', x(new Date(data[timeseries.length - 1]['date'] + '2020')))\n          .attr('cy', y(i, data[timeseries.length - 1]));\n      });\n\n      function mouseout() {\n        setDatapoint(data[timeseries.length - 1]);\n        setIndex(timeseries.length - 1);\n        focus.forEach((d, i) => {\n          d.attr(\n            'cx',\n            x(new Date(data[timeseries.length - 1]['date'] + '2020'))\n          ).attr('cy', y(i, data[timeseries.length - 1]));\n        });\n      }\n\n      function mousemove() {\n        const xm = d3.mouse(this)[0];\n        const i = Math.round(indexScale.invert(xm));\n        if (0 <= i && i < timeseries.length) {\n          const d = data[i];\n          setDatapoint(d);\n          setIndex(i);\n          focus.forEach((f, j) => {\n            f.attr('cx', x(new Date(d['date'] + '2020'))).attr('cy', y(j, d));\n          });\n        }\n      }\n\n      const tickCount = (scaleIdx) => {\n        const dType = dataTypes[scaleIdx];\n        return logMode && logCharts.has(dType)\n          ? Math.ceil(Math.log10(yScales[scaleIdx].domain()[1]))\n          : 5;\n      };\n\n      /* Begin drawing charts */\n      svgArray.forEach((s, i) => {\n        /* X axis */\n        s.append('g')\n          .attr('transform', 'translate(0,' + height + ')')\n          .attr('class', 'axis')\n          .call(d3.axisBottom(x));\n\n        /* Y axis */\n        s.append('g')\n          .attr('transform', `translate(${width}, ${0})`)\n          .attr('class', 'axis')\n          .call(\n            d3\n              .axisRight(yScales[i])\n              .ticks(tickCount(i))\n              .tickPadding(5)\n              .tickFormat(d3.format('~s'))\n          );\n\n        /* Focus dots */\n        s.on('mousemove', mousemove)\n          .on('touchmove', mousemove)\n          .on('mouseout', mouseout)\n          .on('touchend', mouseout);\n\n        /* Path dots */\n        const dots = s\n          .selectAll('.dot')\n          .data(data)\n          .enter()\n          .append('circle')\n          .attr('fill', colors[i])\n          .attr('stroke', colors[i])\n          .attr('cursor', 'pointer')\n          .attr('cx', (d) => {\n            return x(new Date(d['date'] + '2020'));\n          })\n          .attr('cy', (d) => y(i, d));\n\n        /* Paths */\n        if (i < Math.floor(svgArray.length / 2)) {\n          s.append('path')\n            .datum(data)\n            .attr('fill', 'none')\n            .attr('stroke', colors[i] + '99')\n            .attr('stroke-width', 5)\n            .attr('cursor', 'pointer')\n            .attr(\n              'd',\n              d3\n                .line()\n                .x((d) => {\n                  return x(new Date(d['date'] + '2020'));\n                })\n                .y((d) => y(i, d))\n                .curve(d3.curveCardinal)\n            );\n          dots.attr('r', 3);\n        } else {\n          s.selectAll('stem-line')\n            .data(data)\n            .enter()\n            .append('line')\n            .attr('x1', (d) => {\n              return x(new Date(d['date'] + '2020'));\n            })\n            .attr('y1', height)\n            .attr('x2', (d) => {\n              return x(new Date(d['date'] + '2020'));\n            })\n            .attr('y2', (d) => y(i, d))\n            .style('stroke', colors[i] + '99')\n            .style('stroke-width', 4);\n          dots.attr('r', 2);\n        }\n      });\n    },\n    [logMode, mode]\n  );\n\n  const refreshGraphs = useCallback(() => {\n    const graphs = [\n      graphElement1,\n      graphElement2,\n      graphElement3,\n      graphElement4,\n      graphElement5,\n      graphElement6,\n    ];\n    for (let i = 0; i < graphs.length; i++) {\n      d3.select(graphs[i].current).selectAll('*').remove();\n    }\n  }, []);\n\n  useEffect(() => {\n    if (update > 0) {\n      refreshGraphs();\n    }\n  }, [update, refreshGraphs]);\n\n  useEffect(() => {\n    if (timeseries.length > 1) {\n      graphData(timeseries);\n    }\n  }, [timeseries, graphData]);\n\n  const yesterdayDate = new Date();\n  yesterdayDate.setDate(yesterdayDate.getDate() - 1);\n  const lastDate = new Date(datapoint['date'] + '2020');\n  const isYesterday =\n    lastDate.getMonth() === yesterdayDate.getMonth() &&\n    lastDate.getDate() === yesterdayDate.getDate();\n\n  return (\n    <div\n      className=\"TimeSeries-Parent fadeInUp\"\n      style={{animationDelay: '1.7s'}}\n    >\n      <div\n        className=\"timeseries\"\n        style={{display: props.type === 1 ? 'flex' : 'none'}}\n      >\n        <div className=\"svg-parent\">\n          <div className=\"stats\">\n            <h5>Confirmed</h5>\n            <h5>\n              {isYesterday\n                ? `${datapoint['date']} Yesterday`\n                : datapoint['date']}\n            </h5>\n            <div className=\"stats-bottom\">\n              <h2>{datapoint['totalconfirmed']}</h2>\n              <h6>\n                {timeseries.length > 0 && index !== 0\n                  ? timeseries[index]['totalconfirmed'] -\n                      timeseries[index - 1]['totalconfirmed'] >=\n                    0\n                    ? '+' +\n                      (timeseries[index]['totalconfirmed'] -\n                        timeseries[index - 1]['totalconfirmed'])\n                    : timeseries[index]['totalconfirmed'] -\n                      timeseries[index - 1]['totalconfirmed']\n                  : ''}\n              </h6>\n            </div>\n          </div>\n          <svg\n            ref={graphElement1}\n            width=\"650\"\n            height=\"200\"\n            viewBox=\"0 0 650 200\"\n            preserveAspectRatio=\"xMidYMid meet\"\n          />\n        </div>\n\n        <div className=\"svg-parent is-green\">\n          <div className=\"stats is-green\">\n            <h5>Recovered</h5>\n            <h5>\n              {isYesterday\n                ? `${datapoint['date']} Yesterday`\n                : datapoint['date']}\n            </h5>\n            <div className=\"stats-bottom\">\n              <h2>{datapoint['totalrecovered']}</h2>\n              <h6>\n                {timeseries.length > 0 && index !== 0\n                  ? timeseries[index]['totalrecovered'] -\n                      timeseries[index - 1]['totalrecovered'] >=\n                    0\n                    ? '+' +\n                      (timeseries[index]['totalrecovered'] -\n                        timeseries[index - 1]['totalrecovered'])\n                    : timeseries[index]['totalrecovered'] -\n                      timeseries[index - 1]['totalrecovered']\n                  : ''}\n              </h6>\n            </div>\n          </div>\n          <svg\n            ref={graphElement2}\n            width=\"650\"\n            height=\"200\"\n            viewBox=\"0 0 650 200\"\n            preserveAspectRatio=\"xMidYMid meet\"\n          />\n        </div>\n\n        <div className=\"svg-parent is-gray\">\n          <div className=\"stats is-gray\">\n            <h5>Deceased</h5>\n            <h5>\n              {isYesterday\n                ? `${datapoint['date']} Yesterday`\n                : datapoint['date']}\n            </h5>\n            <div className=\"stats-bottom\">\n              <h2>{datapoint['totaldeceased']}</h2>\n              <h6>\n                {timeseries.length > 0 && index !== 0\n                  ? timeseries[index]['totaldeceased'] -\n                      timeseries[index - 1]['totaldeceased'] >=\n                    0\n                    ? '+' +\n                      (timeseries[index]['totaldeceased'] -\n                        timeseries[index - 1]['totaldeceased'])\n                    : timeseries[index]['totaldeceased'] -\n                      timeseries[index - 1]['totaldeceased']\n                  : ''}\n              </h6>\n            </div>\n          </div>\n          <svg\n            ref={graphElement3}\n            width=\"650\"\n            height=\"200\"\n            viewBox=\"0 0 650 200\"\n            preserveAspectRatio=\"xMidYMid meet\"\n          />\n        </div>\n      </div>\n\n      <div\n        className=\"timeseries\"\n        style={{display: props.type === 2 ? 'flex' : 'none'}}\n      >\n        <div className=\"svg-parent\">\n          <div className=\"stats\">\n            <h5>Confirmed</h5>\n            <h5>\n              {isYesterday\n                ? `${datapoint['date']} Yesterday`\n                : datapoint['date']}\n            </h5>\n            <div className=\"stats-bottom\">\n              <h2>{datapoint['dailyconfirmed']}</h2>\n              <h6>\n                {timeseries.length > 0 && index !== 0\n                  ? timeseries[index]['dailyconfirmed'] -\n                      timeseries[index - 1]['dailyconfirmed'] >=\n                    0\n                    ? '+' +\n                      (timeseries[index]['dailyconfirmed'] -\n                        timeseries[index - 1]['dailyconfirmed'])\n                    : timeseries[index]['dailyconfirmed'] -\n                      timeseries[index - 1]['dailyconfirmed']\n                  : ''}\n              </h6>\n            </div>\n          </div>\n          <svg\n            ref={graphElement4}\n            width=\"650\"\n            height=\"200\"\n            viewBox=\"0 0 650 200\"\n            preserveAspectRatio=\"xMidYMid meet\"\n          />\n        </div>\n\n        <div className=\"svg-parent is-green\">\n          <div className=\"stats is-green\">\n            <h5>Recovered</h5>\n            <h5>\n              {isYesterday\n                ? `${datapoint['date']} Yesterday`\n                : datapoint['date']}\n            </h5>\n            <div className=\"stats-bottom\">\n              <h2>{datapoint['dailyrecovered']}</h2>\n              <h6>\n                {timeseries.length > 0 && index !== 0\n                  ? timeseries[index]['dailyrecovered'] -\n                      timeseries[index - 1]['dailyrecovered'] >=\n                    0\n                    ? '+' +\n                      (timeseries[index]['dailyrecovered'] -\n                        timeseries[index - 1]['dailyrecovered'])\n                    : timeseries[index]['dailyrecovered'] -\n                      timeseries[index - 1]['dailyrecovered']\n                  : ''}\n              </h6>\n            </div>\n          </div>\n          <svg\n            ref={graphElement5}\n            width=\"650\"\n            height=\"200\"\n            viewBox=\"0 0 650 200\"\n            preserveAspectRatio=\"xMidYMid meet\"\n          />\n        </div>\n\n        <div className=\"svg-parent is-gray\">\n          <div className=\"stats is-gray\">\n            <h5>Deceased</h5>\n            <h5>\n              {isYesterday\n                ? `${datapoint['date']} Yesterday`\n                : datapoint['date']}\n            </h5>\n            <div className=\"stats-bottom\">\n              <h2>{datapoint['dailydeceased']}</h2>\n              <h6>\n                {timeseries.length > 0 && index !== 0\n                  ? timeseries[index]['dailydeceased'] -\n                      timeseries[index - 1]['dailydeceased'] >=\n                    0\n                    ? '+' +\n                      (timeseries[index]['dailydeceased'] -\n                        timeseries[index - 1]['dailydeceased'])\n                    : timeseries[index]['dailydeceased'] -\n                      timeseries[index - 1]['dailydeceased']\n                  : ''}\n              </h6>\n            </div>\n          </div>\n          <svg\n            ref={graphElement6}\n            width=\"650\"\n            height=\"200\"\n            viewBox=\"0 0 650 200\"\n            preserveAspectRatio=\"xMidYMid meet\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default TimeSeries;\n","import React, {useState, useEffect, useRef, useCallback} from 'react';\nimport * as d3 from 'd3';\n\nfunction Minigraph(props) {\n  const [timeseries, setTimeseries] = useState([]);\n  const graphElement1 = useRef(null);\n  const graphElement2 = useRef(null);\n  const graphElement3 = useRef(null);\n  const graphElement4 = useRef(null);\n\n  useEffect(() => {\n    if (props.timeseries.length > 1) {\n      setTimeseries(props.timeseries.slice(props.timeseries.length - 20));\n    }\n  }, [props.timeseries]);\n\n  const graphData = useCallback(\n    (timeseries) => {\n      if (timeseries.length <= 1) return 0;\n      const data = timeseries;\n      const svg1 = d3.select(graphElement1.current);\n      const margin = {top: 30, right: 10, bottom: 30, left: 0};\n      const width = 100 - margin.left - margin.right;\n      const height = 100 - margin.top - margin.bottom;\n\n      const svg2 = d3.select(graphElement2.current);\n      const svg3 = d3.select(graphElement3.current);\n      const svg4 = d3.select(graphElement4.current);\n\n      const x = d3\n        .scaleTime()\n        .domain(\n          d3.extent(data, function (d) {\n            return new Date(d['date'] + '2020');\n          })\n        )\n        .range([0, width]);\n\n      const y1 = d3\n        .scaleLinear()\n        .domain([\n          0,\n          d3.max(data, function (d) {\n            return +d['dailyconfirmed'];\n          }),\n        ])\n        .range([height, 0]);\n\n      const path1 = svg1\n        .append('path')\n        .datum(data)\n        .attr('fill', 'none')\n        .attr('stroke', '#ff073a99')\n        .attr('stroke-width', 3)\n        .attr('cursor', 'pointer')\n        .attr(\n          'd',\n          d3\n            .line()\n            .x(function (d) {\n              return x(new Date(d['date'] + '2020'));\n            })\n            .y(function (d, i) {\n              return y1(d['dailyconfirmed']);\n            })\n            .curve(d3.curveCardinal)\n        );\n\n      const totalLength1 = path1.node().getTotalLength();\n      path1\n        .attr('stroke-dasharray', totalLength1 + ' ' + totalLength1)\n        .attr('stroke-dashoffset', totalLength1)\n        .transition()\n        .duration(props.animate ? 2000 : 0)\n        .attr('stroke-dashoffset', 0);\n\n      svg1\n        .selectAll('.dot')\n        .data(data.slice(data.length - 1))\n        .enter()\n        .append('circle')\n        .attr('fill', '#ff073a')\n        .attr('stroke', '#ff073a')\n        .attr('r', 2)\n        .attr('cursor', 'pointer')\n        .attr('cx', function (d) {\n          return x(new Date(d['date'] + '2020'));\n        })\n        .attr('cy', function (d) {\n          return y1(d['dailyconfirmed']);\n        })\n        .on('mouseover', (d) => {\n          d3.select(d3.event.target).attr('r', '5');\n        })\n        .on('mouseout', (d) => {\n          d3.select(d3.event.target).attr('r', '2');\n        })\n        .style('opacity', 0)\n        .transition()\n        .duration(props.animate ? 3000 : 0)\n        .style('opacity', 1);\n\n      const path2 = svg2\n        .append('path')\n        .datum(data)\n        .attr('fill', 'none')\n        .attr('cursor', 'pointer')\n        .attr('stroke', '#007bff99')\n        .attr('stroke-width', 3)\n        .attr('cursor', 'pointer')\n        .attr('cursor', 'pointer')\n        .attr(\n          'd',\n          d3\n            .line()\n            .x(function (d) {\n              return x(new Date(d['date'] + '2020'));\n            })\n            .y(function (d, i) {\n              if (i === 0) {\n                return y1(\n                  d['dailyconfirmed'] - d['dailyrecovered'] - d['dailydeceased']\n                );\n              } else {\n                return y1(\n                  d['dailyconfirmed'] - d['dailyrecovered'] - d['dailydeceased']\n                );\n              }\n            })\n            .curve(d3.curveCardinal)\n        );\n\n      const totalLength2 = path2.node().getTotalLength();\n      path2\n        .attr('stroke-dasharray', totalLength2 + ' ' + totalLength2)\n        .attr('stroke-dashoffset', totalLength2)\n        .transition()\n        .duration(props.animate ? 2000 : 0)\n        .attr('stroke-dashoffset', 0);\n\n      svg2\n        .selectAll('.dot')\n        .data(data.slice(data.length - 1))\n        .enter()\n        .append('circle')\n        .attr('fill', '#007bff')\n        .attr('stroke', '#007bff')\n        .attr('r', 2)\n        .attr('cursor', 'pointer')\n        .attr('cx', function (d) {\n          return x(new Date(d['date'] + '2020'));\n        })\n        .attr('cy', function (d) {\n          /* const today =\n          data[data.length - 1]['dailyconfirmed'] -\n          data[data.length - 1]['dailyrecovered'] -\n          data[data.length - 1]['dailydeceased'];\n        const yesterday =\n          data[data.length - 2]['dailyconfirmed'] -\n          data[data.length - 2]['dailyrecovered'] -\n          data[data.length - 2]['dailydeceased'];*/\n          return y1(\n            d['dailyconfirmed'] - d['dailyrecovered'] - d['dailydeceased']\n          );\n        })\n        .on('mouseover', (d) => {\n          d3.select(d3.event.target).attr('r', '5');\n        })\n        .on('mouseout', (d) => {\n          d3.select(d3.event.target).attr('r', '2');\n        })\n        .style('opacity', 0)\n        .transition()\n        .duration(props.animate ? 3000 : 0)\n        .style('opacity', 1);\n\n      const path3 = svg3\n        .append('path')\n        .datum(data)\n        .attr('fill', 'none')\n        .attr('stroke', '#28a74599')\n        .attr('stroke-width', 3)\n        .attr('cursor', 'pointer')\n        .attr(\n          'd',\n          d3\n            .line()\n            .x(function (d) {\n              return x(new Date(d['date'] + '2020'));\n            })\n            .y(function (d, i) {\n              if (i === 0) {\n                return y1(d['dailyrecovered']);\n              } else {\n                return y1(d['dailyrecovered']);\n              }\n            })\n            .curve(d3.curveCardinal)\n        );\n\n      const totalLength3 = path1.node().getTotalLength();\n      path3\n        .attr('stroke-dasharray', totalLength3 + ' ' + totalLength3)\n        .attr('stroke-dashoffset', totalLength3)\n        .transition()\n        .duration(props.animate ? 2000 : 0)\n        .attr('stroke-dashoffset', 0);\n\n      svg3\n        .selectAll('.dot')\n        .data(data.slice(data.length - 1))\n        .enter()\n        .append('circle')\n        .attr('fill', '#28a745')\n        .attr('stroke', '#28a745')\n        .attr('r', 2)\n        .attr('cursor', 'pointer')\n        .attr('cx', function (d) {\n          return x(new Date(d['date'] + '2020'));\n        })\n        .attr('cy', function (d) {\n          return y1(d['dailyrecovered']);\n        })\n        .on('mouseover', (d) => {\n          d3.select(d3.event.target).attr('r', '5');\n        })\n        .on('mouseout', (d) => {\n          d3.select(d3.event.target).attr('r', '2');\n        })\n        .style('opacity', 0)\n        .transition()\n        .duration(props.animate ? 3000 : 0)\n        .style('opacity', 1);\n\n      const path4 = svg4\n        .append('path')\n        .datum(data)\n        .attr('fill', 'none')\n        .attr('cursor', 'pointer')\n        .attr('stroke', '#6c757d99')\n        .attr('stroke-width', 3)\n        .attr('cursor', 'pointer')\n        .attr('cursor', 'pointer')\n        .attr(\n          'd',\n          d3\n            .line()\n            .x(function (d) {\n              return x(new Date(d['date'] + '2020'));\n            })\n            .y(function (d, i) {\n              if (i === 0) {\n                return y1(d['dailydeceased']);\n              } else {\n                return y1(d['dailydeceased']);\n              }\n            })\n            .curve(d3.curveCardinal)\n        );\n\n      const totalLength4 = path4.node().getTotalLength();\n      path4\n        .attr('stroke-dasharray', totalLength4 + ' ' + totalLength4)\n        .attr('stroke-dashoffset', totalLength4)\n        .transition()\n        .duration(props.animate ? 2000 : 0)\n        .attr('stroke-dashoffset', 0);\n\n      svg4\n        .selectAll('.dot')\n        .data(data.slice(data.length - 1))\n        .enter()\n        .append('circle')\n        .attr('fill', '#6c757d')\n        .attr('stroke', '#6c757d')\n        .attr('r', 2)\n        .attr('cursor', 'pointer')\n        .attr('cx', function (d) {\n          return x(new Date(d['date'] + '2020'));\n        })\n        .attr('cy', function (d) {\n          return y1(d['dailydeceased']);\n        })\n        .on('mouseover', (d) => {\n          d3.select(d3.event.target).attr('r', '5');\n        })\n        .on('mouseout', (d) => {\n          d3.select(d3.event.target).attr('r', '2');\n        })\n        .style('opacity', 0)\n        .transition()\n        .duration(props.animate ? 3000 : 0)\n        .style('opacity', 1);\n    },\n    [props.animate]\n  );\n\n  useEffect(() => {\n    graphData(timeseries);\n  }, [timeseries, graphData]);\n\n  return (\n    <div className=\"Minigraph\">\n      <div className=\"svg-parent fadeInUp\" style={{animationDelay: '0.6s'}}>\n        <svg\n          ref={graphElement1}\n          width=\"100\"\n          height=\"100\"\n          viewBox=\"0 0 100 100\"\n          preserveAspectRatio=\"xMidYMid meet\"\n        />\n      </div>\n\n      <div\n        className=\"svg-parent is-blue fadeInUp\"\n        style={{animationDelay: '0.7s'}}\n      >\n        <svg\n          ref={graphElement2}\n          width=\"100\"\n          height=\"100\"\n          viewBox=\"0 0 100 100\"\n          preserveAspectRatio=\"xMidYMid meet\"\n        />\n      </div>\n\n      <div\n        className=\"svg-parent is-green fadeInUp\"\n        style={{animationDelay: '0.8s'}}\n      >\n        <svg\n          ref={graphElement3}\n          width=\"100\"\n          height=\"100\"\n          viewBox=\"0 0 100 100\"\n          preserveAspectRatio=\"xMidYMid meet\"\n        />\n      </div>\n\n      <div\n        className=\"svg-parent is-gray fadeInUp\"\n        style={{animationDelay: '0.9s'}}\n      >\n        <svg\n          ref={graphElement4}\n          width=\"100\"\n          height=\"100\"\n          viewBox=\"0 0 100 100\"\n          preserveAspectRatio=\"xMidYMid meet\"\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default Minigraph;\n","import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\nimport {formatDistance, format} from 'date-fns';\nimport {\n  formatDate,\n  formatDateAbsolute,\n  validateCTS,\n} from '../utils/common-functions';\nimport * as Icon from 'react-feather';\nimport {Link} from 'react-router-dom';\n\nimport Table from './table';\nimport Level from './level';\nimport MapExplorer from './mapexplorer';\nimport TimeSeries from './timeseries';\nimport Minigraph from './minigraph';\n\nfunction Home(props) {\n  const [states, setStates] = useState([]);\n  const [stateDistrictWiseData, setStateDistrictWiseData] = useState({});\n  /* const [patients, setPatients] = useState([]);*/\n  const [fetched, setFetched] = useState(false);\n  const [graphOption, setGraphOption] = useState(1);\n  const [lastUpdated, setLastUpdated] = useState('');\n  const [timeseries, setTimeseries] = useState([]);\n  const [activityLog, setActivityLog] = useState([]);\n  const [timeseriesMode, setTimeseriesMode] = useState(true);\n  const [timeseriesLogMode, setTimeseriesLogMode] = useState(false);\n  const [regionHighlighted, setRegionHighlighted] = useState(undefined);\n\n  useEffect(() => {\n    if (fetched === false) {\n      getStates();\n    }\n  }, [fetched]);\n\n  const getStates = async () => {\n    try {\n      const [\n        response,\n        stateDistrictWiseResponse,\n        updateLogResponse,\n      ] = await Promise.all([\n        axios.get('https://api.covid19india.org/data.json'),\n        axios.get('https://api.covid19india.org/state_district_wise.json'),\n        axios.get('https://api.covid19india.org/updatelog/log.json'),\n      ]);\n      setStates(response.data.statewise);\n      setTimeseries(validateCTS(response.data.cases_time_series));\n      setLastUpdated(response.data.statewise[0].lastupdatedtime);\n      setStateDistrictWiseData(stateDistrictWiseResponse.data);\n      setActivityLog(updateLogResponse.data);\n      /* setPatients(rawDataResponse.data.raw_data.filter((p) => p.detectedstate));*/\n      setFetched(true);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const onHighlightState = (state, index) => {\n    if (!state && !index) setRegionHighlighted(null);\n    else setRegionHighlighted({state, index});\n  };\n  const onHighlightDistrict = (district, state, index) => {\n    if (!state && !index && !district) setRegionHighlighted(null);\n    else setRegionHighlighted({district, state, index});\n  };\n\n  return (\n    <React.Fragment>\n      <div className=\"Home\">\n        <div className=\"home-left\">\n          <div className=\"header fadeInUp\" style={{animationDelay: '1s'}}>\n            <div className=\"header-mid\">\n              <div className=\"titles\">\n                <h1>India COVID-19 Tracker</h1>\n                <h6 style={{fontWeight: 600}}>A Crowdsourced Initiative</h6>\n              </div>\n              <div className=\"last-update\">\n                <h6>Last Updated</h6>\n                <h6 style={{color: '#28a745', fontWeight: 600}}>\n                  {isNaN(Date.parse(formatDate(lastUpdated)))\n                    ? ''\n                    : formatDistance(\n                        new Date(formatDate(lastUpdated)),\n                        new Date()\n                      ) + ' Ago'}\n                </h6>\n                <h6 style={{color: '#28a745', fontWeight: 600}}>\n                  {isNaN(Date.parse(formatDate(lastUpdated)))\n                    ? ''\n                    : formatDateAbsolute(lastUpdated)}\n                </h6>\n              </div>\n            </div>\n          </div>\n\n          {states.length > 1 && <Level data={states} />}\n          <Minigraph timeseries={timeseries} animate={true} />\n          <Table\n            states={states}\n            summary={false}\n            stateDistrictWiseData={stateDistrictWiseData}\n            onHighlightState={onHighlightState}\n            onHighlightDistrict={onHighlightDistrict}\n          />\n        </div>\n\n        <div className=\"home-right\">\n          {fetched && (\n            <React.Fragment>\n              <MapExplorer\n                states={states}\n                stateDistrictWiseData={stateDistrictWiseData}\n                regionHighlighted={regionHighlighted}\n              />\n\n              <div\n                className=\"timeseries-header fadeInUp\"\n                style={{animationDelay: '2.5s'}}\n              >\n                <h1>Spread Trends</h1>\n                <div className=\"tabs\">\n                  <div\n                    className={`tab ${graphOption === 1 ? 'focused' : ''}`}\n                    onClick={() => {\n                      setGraphOption(1);\n                    }}\n                  >\n                    <h4>Cumulative</h4>\n                  </div>\n                  <div\n                    className={`tab ${graphOption === 2 ? 'focused' : ''}`}\n                    onClick={() => {\n                      setGraphOption(2);\n                    }}\n                  >\n                    <h4>Daily</h4>\n                  </div>\n                </div>\n\n                <div className=\"scale-modes\">\n                  <label>Scale Modes</label>\n                  <div className=\"timeseries-mode\">\n                    <label htmlFor=\"timeseries-mode\">Uniform</label>\n                    <input\n                      type=\"checkbox\"\n                      checked={timeseriesMode}\n                      className=\"switch\"\n                      aria-label=\"Checked by default to scale uniformly.\"\n                      onChange={(event) => {\n                        setTimeseriesMode(!timeseriesMode);\n                      }}\n                    />\n                  </div>\n                  <div\n                    className={`timeseries-logmode ${\n                      graphOption !== 1 ? 'disabled' : ''\n                    }`}\n                  >\n                    <label htmlFor=\"timeseries-logmode\">Logarithmic</label>\n                    <input\n                      type=\"checkbox\"\n                      checked={graphOption === 1 && timeseriesLogMode}\n                      className=\"switch\"\n                      disabled={graphOption !== 1}\n                      onChange={(event) => {\n                        setTimeseriesLogMode(!timeseriesLogMode);\n                      }}\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <TimeSeries\n                timeseries={timeseries}\n                type={graphOption}\n                mode={timeseriesMode}\n                logMode={timeseriesLogMode}\n              />\n            </React.Fragment>\n          )}\n        </div>\n\n        {/* <div className=\"home-left\">\n        {patients.length > 1 && (\n          <div className=\"patients-summary\">\n            <h1>Recent Cases</h1>\n            <h6>A summary of the latest reported cases</h6>\n            <div className=\"legend\">\n              <div className=\"legend-left\">\n                <div className=\"circle is-female\"></div>\n                <h5 className=\"is-female\">Female</h5>\n                <div className=\"circle is-male\"></div>\n                <h5 className=\"is-male\">Male</h5>\n                <div className=\"circle\"></div>\n                <h5 className=\"\">Unknown</h5>\n              </div>\n            </div>\n            <div className=\"patients-summary-wrapper\">\n              <Patients\n                patients={patients}\n                summary={true}\n                colorMode={'genders'}\n                expand={true}\n              />\n            </div>\n            <button className=\"button\">\n              <Link to=\"/database\">\n                <Icon.Database />\n                <span>View the Patients Database</span>\n              </Link>\n            </button>\n          </div>\n        )}\n      </div>\n      <div className=\"home-right\"></div>\n    */}\n      </div>\n\n      <div className=\"Home\">\n        <div className=\"home-left\">\n          <div\n            className=\"updates-header fadeInUp\"\n            style={{animationDelay: '1.5s'}}\n          >\n            <h1>Updates</h1>\n            <h2>{format(new Date(), 'd MMM')}</h2>\n          </div>\n\n          <div className=\"updates fadeInUp\" style={{animationDelay: '1.7s'}}>\n            {activityLog\n              .slice(-5)\n              .reverse()\n              .map(function (activity, index) {\n                return (\n                  <div key={index} className=\"update\">\n                    <h5>\n                      {formatDistance(\n                        new Date(activity.timestamp * 1000),\n                        new Date()\n                      ) + ' Ago'}\n                    </h5>\n                    <h4>{activity.update}</h4>\n                  </div>\n                );\n              })}\n            <button className=\"button\">\n              <Link to=\"/patients\">\n                <Icon.Database />\n                <span>Patients Overview</span>\n              </Link>\n            </button>\n          </div>\n        </div>\n\n        <div className=\"home-right\"></div>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default Home;\n","import React from 'react';\nimport {Link} from 'react-router-dom';\n\nfunction Navbar(props) {\n  // HTML Properties for each of the links in UI\n  const navLinkProps = (path, animationDelay) => ({\n    className: `fadeInUp ${window.location.pathname === path ? 'focused' : ''}`,\n    style: {\n      animationDelay: `${animationDelay}s`,\n    },\n  });\n\n  if (window.location.pathname !== '/summary') {\n    return (\n      <div\n        className=\"Navbar\"\n        style={{\n          animationDelay: '0.5s',\n          height: window.location.pathname === '/clusters' ? '2.5rem' : '',\n          transition: 'all 0.3s ease-in-out',\n        }}\n      >\n        <img\n          className=\"fadeInUp logo\"\n          alt=\"India COVID-19 Tracker\"\n          src=\"/covid19.svg\"\n          style={{\n            animationDelay: '0.0s',\n            width: window.location.pathname === '/clusters' ? '1.5rem' : '',\n            height: window.location.pathname === '/clusters' ? '1.5rem' : '',\n            transition: 'all 0.3s ease-in-out',\n          }}\n        />\n\n        <div className=\"navbar-left\">\n          {props.pages.map((page, i) => {\n            return (\n              <Link to={page.pageLink} key={i}>\n                <span\n                  {...navLinkProps(page.pageLink, page.animationDelayForNavbar)}\n                >\n                  {page.displayName}\n                </span>\n              </Link>\n            );\n          })}\n        </div>\n\n        <div className=\"navbar-right\"></div>\n      </div>\n    );\n  } else {\n    return <div></div>;\n  }\n}\n\nexport default Navbar;\n","import React from 'react';\n\nfunction Links(props) {\n  return (\n    <div className=\"Links\">\n      <div className=\"link fadeInUp\" style={{animationDelay: '0.2s'}}>\n        <h3>HELPLINE NUMBERS [by State]</h3>\n        <a href=\"https://www.mohfw.gov.in/pdf/coronvavirushelplinenumber.pdf\">\n          https://www.mohfw.gov.in/pdf/coronvavirushelplinenumber.pdf\n        </a>\n      </div>\n\n      <div className=\"link fadeInUp\" style={{animationDelay: '0.3s'}}>\n        <h3>Ministry of Health and Family Welfare, Gov. of India</h3>\n        <a href=\"https://www.mohfw.gov.in/\">https://www.mohfw.gov.in/</a>\n      </div>\n\n      <div className=\"link fadeInUp\" style={{animationDelay: '0.4s'}}>\n        <h3>WHO : COVID-19 Home Page</h3>\n        <a href=\"https://www.who.int/emergencies/diseases/novel-coronavirus-2019\">\n          https://www.who.int/emergencies/diseases/novel-coronavirus-2019\n        </a>\n      </div>\n\n      <div className=\"link fadeInUp\" style={{animationDelay: '0.5s'}}>\n        <h3>CDC</h3>\n        <a href=\"https://www.cdc.gov/coronavirus/2019-ncov/faq.html\">\n          https://www.cdc.gov/coronavirus/2019-ncov/faq.html\n        </a>\n      </div>\n\n      <div className=\"link fadeInUp\" style={{animationDelay: '0.6s'}}>\n        <h3>COVID-19 Global Tracker</h3>\n        <a href=\"https://coronavirus.thebaselab.com/\">\n          https://coronavirus.thebaselab.com/\n        </a>\n      </div>\n    </div>\n  );\n}\n\nexport default Links;\n","import React, {useState, useEffect, useCallback} from 'react';\nimport axios from 'axios';\n\nfunction Banner(props) {\n  const [snippets, setSnippets] = useState([]);\n  const [snippet, setSnippet] = useState();\n\n  useEffect(() => {\n    axios\n      .get('https://api.covid19india.org/website_data.json')\n      .then((response) => {\n        setSnippets(response.data.factoids || []);\n        setSnippet(\n          response.data.factoids[\n            Math.floor(\n              Math.random() * (response.data.factoids.length - 1 - 0) + 0\n            )\n          ] || ''\n        );\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }, []);\n\n  const snippetChooser = useCallback(\n    (min, max) => {\n      const index = Math.random() * (max - min) + min;\n      setSnippet(snippets[Math.floor(index)]);\n    },\n    [snippets]\n  );\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      snippetChooser(0, snippets.length - 1);\n    }, 10000);\n    return () => clearInterval(interval);\n  }, [snippetChooser, snippets]);\n\n  return (\n    <div\n      onClick={() => snippetChooser(0, snippets.length - 1)}\n      className=\"Banner fadeInUp\"\n      style={{animationDelay: '0.2s'}}\n    >\n      <div className=\"snippet\">{snippet ? snippet.banner : ''} &nbsp;</div>\n    </div>\n  );\n}\n\nexport default Banner;\n","import React, {useState, useEffect, useCallback} from 'react';\nimport {parse, format} from 'date-fns';\nimport * as Icon from 'react-feather';\n\nfunction Patients(props) {\n  const [patients, setPatients] = useState(props.patients);\n  const [patient, setPatient] = useState(props.patients.slice(-1));\n  const [logs, setLogs] = useState({});\n  const [modal, setModal] = useState(false);\n\n  useEffect(() => {\n    setPatients(props.patients);\n  }, [props.patients]);\n\n  useEffect(() => {\n    if (modal) document.body.style.overflow = 'hidden';\n    if (!modal) document.body.style.overflow = 'unset';\n  }, [modal]);\n\n  const parseByDate = useCallback((patients) => {\n    const log = {};\n    for (let i = 0; i < patients.length; i++) {\n      const day = new Date(\n        parse(patients[i].dateannounced, 'dd/MM/yyyy', new Date())\n      );\n      if (!(day in log)) {\n        const list = [];\n        list.push(patients[i]);\n        log[day] = list;\n      } else {\n        const list = log[day];\n        list.push(patients[i]);\n        log[day] = list;\n      }\n    }\n    setLogs(log);\n  }, []);\n\n  useEffect(() => {\n    if (patients.length) {\n      parseByDate(patients);\n    }\n  }, [parseByDate, patients]);\n\n  const switchPatient = (patientIndexArg) => {\n    if (patientIndexArg === '') return;\n    try {\n      const patientIndex = patientIndexArg.slice(1);\n      // eslint-disable-next-line\n      patients.map((patient, index) => {\n        if (patient.patientnumber === patientIndex) setPatient(patient);\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return (\n    <React.Fragment>\n      {props.colorMode === 'genders' && (\n        <div className=\"Patients fadeInUp\" style={{animationDelay: '1s'}}>\n          {Object.keys(logs)\n            .slice(props.summary ? -1 : 0)\n            .map((day, index) => {\n              if (day !== 'Invalid Date') {\n                return (\n                  <React.Fragment>\n                    <h5 className=\"daylabel\">\n                      {format(new Date(day), 'dd MMM, yyyy')} &nbsp;&nbsp;\n                      <span style={{color: '#fb5581'}}>\n                        ({logs[day].length})\n                      </span>\n                    </h5>\n                    <div\n                      key={index}\n                      className={`day ${props.summary ? 'summary' : ''}`}\n                    >\n                      {logs[day]\n                        .slice(props.summary ? -40 : 0)\n                        .map((patient, indexTwo) => {\n                          return (\n                            <div\n                              key={indexTwo}\n                              className={`patient-card ${\n                                patient.gender === 'F'\n                                  ? 'is-femme'\n                                  : patient.gender === 'M'\n                                  ? 'is-male'\n                                  : ''\n                              }`}\n                              onClick={() => {\n                                setModal(true);\n                                setPatient(patient);\n                              }}\n                            >\n                              <h3>P{patient.patientnumber}</h3>\n                            </div>\n                          );\n                        })}\n                    </div>\n                  </React.Fragment>\n                );\n              } else {\n                return null;\n              }\n            })}\n        </div>\n      )}\n\n      {props.colorMode === 'transmission' && (\n        <div className=\"Patients fadeInUp\" style={{animationDelay: '1s'}}>\n          {Object.keys(logs)\n            .slice(props.summary ? -1 : 0)\n            .map((day, index) => {\n              if (day !== 'Invalid Date') {\n                return (\n                  <React.Fragment>\n                    <h5 className=\"daylabel\">\n                      {format(new Date(day), 'dd MMM, yyyy')} &nbsp;&nbsp;\n                      <span style={{color: '#fb5581'}}>\n                        ({patients.length})\n                      </span>\n                    </h5>\n                    <div\n                      key={index}\n                      className={`day ${props.summary ? 'summary' : ''}`}\n                    >\n                      {logs[day]\n                        .slice(props.summary ? -40 : 0)\n                        .map((patient, indexTwo) => {\n                          return (\n                            <div\n                              key={indexTwo}\n                              className={`patient-card ${\n                                patient.typeoftransmission === 'Local'\n                                  ? 'is-local'\n                                  : patient.typeoftransmission === 'Imported'\n                                  ? 'is-imported'\n                                  : ''\n                              }`}\n                              onClick={() => {\n                                setModal(true);\n                                setPatient(patient);\n                              }}\n                            >\n                              <h3>P{patient.patientnumber}</h3>\n                            </div>\n                          );\n                        })}\n                    </div>\n                  </React.Fragment>\n                );\n              } else {\n                return null;\n              }\n            })}\n        </div>\n      )}\n\n      {props.colorMode === 'nationality' && (\n        <div className=\"Patients fadeInUp\" style={{animationDelay: '1s'}}>\n          {Object.keys(logs)\n            .slice(props.summary ? -1 : 0)\n            .map((day, index) => {\n              if (day !== 'Invalid Date') {\n                return (\n                  <React.Fragment>\n                    <h5 className=\"daylabel\">\n                      {format(new Date(day), 'dd MMM, yyyy')} &nbsp;&nbsp;\n                      <span style={{color: '#fb5581'}}>\n                        ({patients.length})\n                      </span>\n                    </h5>\n                    <div\n                      key={index}\n                      className={`day ${props.summary ? 'summary' : ''}`}\n                    >\n                      {logs[day]\n                        .slice(props.summary ? -40 : 0)\n                        .map((patient, indexTwo) => {\n                          return (\n                            <div\n                              key={indexTwo}\n                              className={`patient-card ${\n                                patient.nationality === 'India'\n                                  ? 'is-in'\n                                  : patient.nationality === 'Myanmar'\n                                  ? 'is-mm'\n                                  : patient.nationality === 'Indonesia'\n                                  ? 'is-id'\n                                  : patient.nationality === 'United Kingdom'\n                                  ? 'is-uk'\n                                  : patient.nationality ===\n                                    'United States of America'\n                                  ? 'is-us'\n                                  : patient.nationality === 'Thailand'\n                                  ? 'is-th'\n                                  : patient.nationality === 'Phillipines'\n                                  ? 'is-ph'\n                                  : patient.nationality === 'Italy'\n                                  ? 'is-it'\n                                  : patient.nationality === 'Canada'\n                                  ? 'is-ca'\n                                  : ''\n                              }`}\n                              onClick={() => {\n                                setModal(true);\n                                setPatient(patient);\n                              }}\n                            >\n                              <h3>P{patient.patientnumber}</h3>\n                            </div>\n                          );\n                        })}\n                    </div>\n                  </React.Fragment>\n                );\n              } else {\n                return null;\n              }\n            })}\n        </div>\n      )}\n\n      {modal && (\n        <div className=\"modal\">\n          <div\n            className={`modal-content ${modal ? 'fadeInUp' : 'fadeOutDown'}`}\n          >\n            <div className=\"close-button\">\n              <Icon.XCircle\n                onClick={() => {\n                  setModal(false);\n                }}\n              />\n            </div>\n\n            <div className=\"modal-top\">\n              <h1>#{patient.patientnumber}</h1>\n            </div>\n\n            <div className=\"meta\">\n              <h5>Date Announced</h5>\n              <h3>{patient.dateannounced ? patient.dateannounced : '?'}</h3>\n\n              <h5>Contracted from</h5>\n              <h3\n                className=\"contracted-from\"\n                onClick={() => {\n                  switchPatient(patient.contractedfromwhichpatientsuspected);\n                }}\n              >\n                {patient.contractedfromwhichpatientsuspected\n                  ? patient.contractedfromwhichpatientsuspected\n                  : '?'}\n              </h3>\n\n              <h5>Detected City</h5>\n              <h3>{patient.detectedcity ? patient.detectedcity : '?'}</h3>\n\n              <h5>Detected District</h5>\n              <h3>\n                {patient.detecteddistrict ? patient.detecteddistrict : '?'}\n              </h3>\n\n              <h5>Detected State</h5>\n              <h3>{patient.detectedstate ? patient.detectedstate : '?'}</h3>\n\n              <h5>Nationality</h5>\n              <h3>{patient.nationality ? patient.nationality : '?'}</h3>\n\n              <h5>Age</h5>\n              <h3>{patient.agebracket ? patient.agebracket : '?'}</h3>\n\n              <h5>Gender</h5>\n              <h3>{patient.gender ? patient.gender : '?'}</h3>\n\n              <h5>State Patient Number</h5>\n              <h3>\n                {patient.statepatientnumber ? patient.statepatientnumber : '?'}\n              </h3>\n\n              <h5>Type of transmission</h5>\n              <h3>\n                {patient.typeoftransmission ? patient.typeoftransmission : '?'}\n              </h3>\n            </div>\n\n            <div className=\"notes\">\n              <h5>Notes</h5>\n              <h3>{patient.notes}</h3>\n            </div>\n\n            <h5>Source 1</h5>\n            <div className=\"link\">\n              <a href={patient.source1} target=\"_noblank\">\n                {patient.source1}\n              </a>\n            </div>\n\n            <h5>Source 2</h5>\n            <div className=\"link\">\n              <a href={patient.source1} target=\"_noblank\">\n                {patient.source2}\n              </a>\n            </div>\n\n            <h5>Source 3</h5>\n            <div className=\"link\">\n              <a href={patient.source1} target=\"_noblank\">\n                {patient.source3}\n              </a>\n            </div>\n          </div>\n        </div>\n      )}\n    </React.Fragment>\n  );\n}\n\nexport default Patients;\n","import React from 'react';\nimport {Parser} from 'json2csv';\nimport * as Icon from 'react-feather';\n\nfunction CSVDownloadLink(props) {\n  if (!props.patients) {\n    return '';\n  }\n  try {\n    const parser = new Parser(Object.keys(props.patients[0]));\n    const csv = parser.parse(props.patients);\n    const data = 'data:text/csv;charset=utf-8,' + encodeURIComponent(csv);\n    return (\n      <a href={data} download=\"patients.csv\">\n        <code>CSV</code>\n      </a>\n    );\n  } catch (e) {\n    console.log(e);\n    return (\n      <a href=\"/\">\n        <code>CSV</code>\n      </a>\n    );\n  }\n}\n\nfunction DownloadBlock(props) {\n  if (!props.patients) {\n    return '';\n  }\n\n  const dataJSON =\n    'data:text/json;charset=utf-8,' +\n    encodeURIComponent(JSON.stringify(props.patients));\n\n  return (\n    <div className=\"DownloadBlock fadeInUp\" style={{animationDelay: '0.5s'}}>\n      <button className=\"button level-item\">\n        <Icon.Download />\n        <CSVDownloadLink patients={props.patients} />\n      </button>\n      <button className=\"button level-item\">\n        <Icon.Download />\n        <a href={dataJSON} download=\"patients.json\">\n          JSON\n        </a>\n      </button>\n    </div>\n  );\n}\n\nexport default DownloadBlock;\n","import React, {useState, useEffect} from 'react';\nimport {useLocation} from 'react-router-dom';\nimport axios from 'axios';\nimport {format, parse, subDays} from 'date-fns';\n\nimport Patients from './patients';\nimport DownloadBlock from './downloadblock';\n\nfunction filterByObject(obj, filters) {\n  const keys = Object.keys(filters);\n  return obj.filter((p) => {\n    return keys.every((key) => {\n      if (!filters[key].length) return true;\n      return p[key] === filters[key];\n    });\n  });\n}\n\nfunction PatientDB(props) {\n  const [fetched, setFetched] = useState(false);\n  const [patients, setPatients] = useState([]);\n  const [filteredPatients, setFilteredPatients] = useState([]);\n  const [error, setError] = useState('');\n  const {pathname} = useLocation();\n  const [filters, setFilters] = useState({\n    detectedstate: '',\n    detecteddistrict: '',\n    detectedcity: '',\n    dateannounced: format(subDays(new Date(), 1), 'dd/MM/yyyy'),\n  });\n  const [colorMode, setColorMode] = useState('genders');\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname]);\n\n  useEffect(() => {\n    async function fetchRawData() {\n      const response = await axios.get(\n        'https://api.covid19india.org/raw_data.json'\n      );\n      if (response.data) {\n        setPatients(response.data.raw_data.reverse());\n        setFetched(true);\n      } else {\n        setError(\"Couldn't fetch patient data. Try again after sometime.\");\n        console.log(response);\n      }\n    }\n\n    if (!fetched) {\n      fetchRawData();\n    }\n  }, [fetched]);\n\n  const handleFilters = (label, value) => {\n    setFilters((f) => {\n      // Create new object (deep copy)\n      const newFilters = {...f};\n      newFilters[label] = value;\n      if (label === 'detectedstate') {\n        const district = document.getElementById('district');\n        const city = document.getElementById('city');\n        // Hide boxes\n        if (value === '') district.style.display = 'none';\n        else district.style.display = 'inline';\n        city.style.display = 'none';\n        // Default to empty selection\n        district.selectedIndex = 0;\n        city.selectedIndex = 0;\n        newFilters['detecteddistrict'] = '';\n        newFilters['detectedcity'] = '';\n      } else if (label === 'detecteddistrict') {\n        const city = document.getElementById('city');\n        // Hide box\n        if (value === '') city.style.display = 'none';\n        else city.style.display = 'inline';\n        // Default to empty selection\n        city.selectedIndex = 0;\n        newFilters['detectedcity'] = '';\n      }\n      return newFilters;\n    });\n  };\n\n  useEffect(() => {\n    setFilteredPatients(filterByObject(patients, filters));\n  }, [patients, filters]);\n\n  function getSortedValues(obj, key) {\n    const setValues = new Set(obj.map((p) => p[key]));\n    if (setValues.size > 1) setValues.add('');\n    return Array.from(setValues).sort();\n  }\n\n  return (\n    <div className=\"PatientsDB\">\n      {error ? <div className=\"alert alert-danger\">{error}</div> : ''}\n\n      <div className=\"filters fadeInUp\" style={{animationDelay: '0.5s'}}>\n        <div className=\"filters-left\">\n          <div className=\"select\">\n            <select\n              style={{animationDelay: '0.3s'}}\n              id=\"state\"\n              onChange={(event) => {\n                handleFilters('detectedstate', event.target.value);\n              }}\n            >\n              <option value=\"\" disabled selected>\n                Select State\n              </option>\n              {getSortedValues(patients, 'detectedstate').map(\n                (state, index) => {\n                  return (\n                    <option key={index} value={state}>\n                      {state === '' ? 'All' : state}\n                    </option>\n                  );\n                }\n              )}\n            </select>\n          </div>\n\n          <div className=\"select\">\n            <select\n              style={{animationDelay: '0.4s', display: 'none'}}\n              id=\"district\"\n              onChange={(event) => {\n                handleFilters('detecteddistrict', event.target.value);\n              }}\n            >\n              <option value=\"\" disabled selected>\n                Select District\n              </option>\n              {getSortedValues(\n                filterByObject(patients, {\n                  detectedstate: filters.detectedstate,\n                }),\n                'detecteddistrict'\n              ).map((district, index) => {\n                return (\n                  <option key={index} value={district}>\n                    {district === '' ? 'All' : district}\n                  </option>\n                );\n              })}\n            </select>\n          </div>\n\n          <div className=\"select\">\n            <select\n              style={{animationDelay: '0.4s', display: 'none'}}\n              id=\"city\"\n              onChange={(event) => {\n                handleFilters('detectedcity', event.target.value);\n              }}\n            >\n              <option value=\"\" disabled selected>\n                Select City\n              </option>\n              {getSortedValues(\n                filterByObject(patients, {\n                  detectedstate: filters.detectedstate,\n                  detecteddistrict: filters.detecteddistrict,\n                }),\n                'detectedcity'\n              ).map((city, index) => {\n                return (\n                  <option key={index} value={city}>\n                    {city === '' ? 'All' : city}\n                  </option>\n                );\n              })}\n            </select>\n          </div>\n\n          <div className=\"select\">\n            <select\n              style={{animationDelay: '0.4s'}}\n              id=\"district\"\n              onChange={(event) => {\n                handleFilters('dateannounced', event.target.value);\n              }}\n            >\n              <option value=\"\" disabled selected>\n                Select Day\n              </option>\n              {getSortedValues(\n                filterByObject(patients, {\n                  detectedstate: filters.detectedstate,\n                }),\n                'dateannounced'\n              ).map((date, index) => {\n                return (\n                  <option key={index} value={date}>\n                    {date === ''\n                      ? 'All'\n                      : format(\n                          parse(date, 'dd/MM/yyyy', new Date()),\n                          'dd MMM, yyyy'\n                        )}\n                  </option>\n                );\n              })}\n            </select>\n          </div>\n\n          {/* <div className=\"select\">\n            <select\n              style={{animationDelay: '0.4s'}}\n              onChange={(event) => {\n                handleFilters('dateannounced', event.target.value);\n              }}\n            >\n              {Array.from(new Set(patients.map((p) => p.dateannounced))).map(\n                (date, index) => {\n                  return (\n                    <option key={index} value={date}>\n                      {date}\n                    </option>\n                  );\n                }\n              )}\n            </select>\n          </div>*/}\n        </div>\n\n        <div className=\"legend\">\n          {colorMode === 'genders' && (\n            <div className=\"legend-left\">\n              <div className=\"circle is-female\"></div>\n              <h5 className=\"is-female\">Female</h5>\n              <div className=\"circle is-male\"></div>\n              <h5 className=\"is-male\">Male</h5>\n              <div className=\"circle\"></div>\n              <h5 className=\"\">Unknown</h5>\n            </div>\n          )}\n\n          {colorMode === 'transmission' && (\n            <div className=\"legend-left\">\n              <div className=\"circle is-local\"></div>\n              <h5 className=\"is-local\">Local</h5>\n              <div className=\"circle is-imported\"></div>\n              <h5 className=\"is-imported\">Imported</h5>\n              <div className=\"circle\"></div>\n              <h5 className=\"\">TBD</h5>\n            </div>\n          )}\n\n          {colorMode === 'nationality' && (\n            <div className=\"legend-left nationality\">\n              <div className=\"circle is-in\"></div>\n              <h5 className=\"is-in\">In</h5>\n              <div className=\"circle is-uk\"></div>\n              <h5 className=\"is-uk\">Uk</h5>\n              <div className=\"circle is-us\"></div>\n              <h5 className=\"is-us\">Us</h5>\n              <div className=\"circle is-th\"></div>\n              <h5 className=\"is-thailand\">Th</h5>\n              <div className=\"circle is-ph\"></div>\n              <h5 className=\"is-ph\">Ph</h5>\n              <div className=\"circle is-it\"></div>\n              <h5 className=\"is-it\">It</h5>\n              <div className=\"circle is-ca\"></div>\n              <h5 className=\"is-ca\">Ca</h5>\n              <div className=\"circle is-id\"></div>\n              <h5 className=\"is-id\">Id</h5>\n              <div className=\"circle is-mm\"></div>\n              <h5 className=\"is-mm\">Mm</h5>\n            </div>\n          )}\n\n          <div className=\"select\">\n            <select\n              style={{animationDelay: '0.4s'}}\n              onChange={(event) => {\n                setColorMode(event.target.value);\n              }}\n            >\n              <option value=\"\" disabled selected>\n                Color modes\n              </option>\n              <option value=\"genders\">Genders</option>\n              <option value=\"transmission\">Transmission</option>\n              <option value=\"nationality\">Nationality</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"header fadeInUp\" style={{animationDelay: '0.3s'}}>\n        <h1>Patients Database</h1>\n        <h3>No. of Patients: {patients.length}</h3>\n      </div>\n      <DownloadBlock patients={patients} />\n      <div className=\"patientdb-wrapper\">\n        <Patients patients={filteredPatients} colorMode={colorMode} />\n      </div>\n      {/* <DownloadBlock patients={patients} /> */}\n    </div>\n  );\n}\n\nexport default PatientDB;\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom';\n// import * as Icon from 'react-feather';\n\nimport './App.scss';\n\nimport Home from './components/home';\nimport Navbar from './components/navbar';\nimport Links from './components/links';\n// import FAQ from './components/faq';\nimport Banner from './components/banner';\nimport PatientDB from './components/patientdb';\n\nconst history = require('history').createBrowserHistory;\n\nfunction App() {\n  const pages = [\n    {\n      pageLink: '/',\n      view: Home,\n      displayName: 'Home',\n      animationDelayForNavbar: 0.2,\n    },\n    {\n      pageLink: '/patients',\n      view: PatientDB,\n      displayName: 'Patients DB',\n      animationDelayForNavbar: 0.3,\n    },\n    {\n      pageLink: '/links',\n      view: Links,\n      displayName: 'Helpful Links',\n      animationDelayForNavbar: 0.5,\n    },\n  ];\n\n  return (\n    <div className=\"App\">\n      <Router history={history}>\n        <Route\n          render={({location}) => (\n            <div className=\"Almighty-Router\">\n              <Navbar pages={pages} />\n              <Banner />\n              <Route exact path=\"/\" render={() => <Redirect to=\"/\" />} />\n              <Switch location={location}>\n                {pages.map((page, i) => {\n                  return (\n                    <Route\n                      exact\n                      path={page.pageLink}\n                      component={page.view}\n                      key={i}\n                    />\n                  );\n                })}\n              </Switch>\n            </div>\n          )}\n        />\n      </Router>\n\n      <footer className=\"fadeInUp\" style={{animationDelay: '2s'}}>\n        <img\n          src=\"/covid19.svg\"\n          alt=\"https://www.covid19.fingersfun.com | Coronavirus cases live dashboard\"\n        />\n        <h5>by Kiran</h5>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'},\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}